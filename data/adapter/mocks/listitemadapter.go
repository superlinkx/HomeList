// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	adapter "github.com/superlinkx/HomeList/data/adapter"

	mock "github.com/stretchr/testify/mock"
)

// MockListItemAdapter is an autogenerated mock type for the ListItemAdapter type
type MockListItemAdapter struct {
	mock.Mock
}

type MockListItemAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListItemAdapter) EXPECT() *MockListItemAdapter_Expecter {
	return &MockListItemAdapter_Expecter{mock: &_m.Mock}
}

// AllItemsFromList provides a mock function with given fields: ctx, listID, limit
func (_m *MockListItemAdapter) AllItemsFromList(ctx context.Context, listID int64, limit int32) ([]adapter.ListItem, error) {
	ret := _m.Called(ctx, listID, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllItemsFromList")
	}

	var r0 []adapter.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32) ([]adapter.ListItem, error)); ok {
		return rf(ctx, listID, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32) []adapter.ListItem); ok {
		r0 = rf(ctx, listID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adapter.ListItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int32) error); ok {
		r1 = rf(ctx, listID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListItemAdapter_AllItemsFromList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllItemsFromList'
type MockListItemAdapter_AllItemsFromList_Call struct {
	*mock.Call
}

// AllItemsFromList is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - limit int32
func (_e *MockListItemAdapter_Expecter) AllItemsFromList(ctx interface{}, listID interface{}, limit interface{}) *MockListItemAdapter_AllItemsFromList_Call {
	return &MockListItemAdapter_AllItemsFromList_Call{Call: _e.mock.On("AllItemsFromList", ctx, listID, limit)}
}

func (_c *MockListItemAdapter_AllItemsFromList_Call) Run(run func(ctx context.Context, listID int64, limit int32)) *MockListItemAdapter_AllItemsFromList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int32))
	})
	return _c
}

func (_c *MockListItemAdapter_AllItemsFromList_Call) Return(_a0 []adapter.ListItem, _a1 error) *MockListItemAdapter_AllItemsFromList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListItemAdapter_AllItemsFromList_Call) RunAndReturn(run func(context.Context, int64, int32) ([]adapter.ListItem, error)) *MockListItemAdapter_AllItemsFromList_Call {
	_c.Call.Return(run)
	return _c
}

// CreateListItem provides a mock function with given fields: ctx, listID, content, sort
func (_m *MockListItemAdapter) CreateListItem(ctx context.Context, listID int64, content string, sort int64) (adapter.ListItem, error) {
	ret := _m.Called(ctx, listID, content, sort)

	if len(ret) == 0 {
		panic("no return value specified for CreateListItem")
	}

	var r0 adapter.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, int64) (adapter.ListItem, error)); ok {
		return rf(ctx, listID, content, sort)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, int64) adapter.ListItem); ok {
		r0 = rf(ctx, listID, content, sort)
	} else {
		r0 = ret.Get(0).(adapter.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, int64) error); ok {
		r1 = rf(ctx, listID, content, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListItemAdapter_CreateListItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateListItem'
type MockListItemAdapter_CreateListItem_Call struct {
	*mock.Call
}

// CreateListItem is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - content string
//   - sort int64
func (_e *MockListItemAdapter_Expecter) CreateListItem(ctx interface{}, listID interface{}, content interface{}, sort interface{}) *MockListItemAdapter_CreateListItem_Call {
	return &MockListItemAdapter_CreateListItem_Call{Call: _e.mock.On("CreateListItem", ctx, listID, content, sort)}
}

func (_c *MockListItemAdapter_CreateListItem_Call) Run(run func(ctx context.Context, listID int64, content string, sort int64)) *MockListItemAdapter_CreateListItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *MockListItemAdapter_CreateListItem_Call) Return(_a0 adapter.ListItem, _a1 error) *MockListItemAdapter_CreateListItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListItemAdapter_CreateListItem_Call) RunAndReturn(run func(context.Context, int64, string, int64) (adapter.ListItem, error)) *MockListItemAdapter_CreateListItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteListItem provides a mock function with given fields: ctx, id
func (_m *MockListItemAdapter) DeleteListItem(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteListItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockListItemAdapter_DeleteListItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteListItem'
type MockListItemAdapter_DeleteListItem_Call struct {
	*mock.Call
}

// DeleteListItem is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockListItemAdapter_Expecter) DeleteListItem(ctx interface{}, id interface{}) *MockListItemAdapter_DeleteListItem_Call {
	return &MockListItemAdapter_DeleteListItem_Call{Call: _e.mock.On("DeleteListItem", ctx, id)}
}

func (_c *MockListItemAdapter_DeleteListItem_Call) Run(run func(ctx context.Context, id int64)) *MockListItemAdapter_DeleteListItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockListItemAdapter_DeleteListItem_Call) Return(_a0 error) *MockListItemAdapter_DeleteListItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockListItemAdapter_DeleteListItem_Call) RunAndReturn(run func(context.Context, int64) error) *MockListItemAdapter_DeleteListItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetListItem provides a mock function with given fields: ctx, id
func (_m *MockListItemAdapter) GetListItem(ctx context.Context, id int64) (adapter.ListItem, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetListItem")
	}

	var r0 adapter.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (adapter.ListItem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) adapter.ListItem); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(adapter.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListItemAdapter_GetListItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListItem'
type MockListItemAdapter_GetListItem_Call struct {
	*mock.Call
}

// GetListItem is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockListItemAdapter_Expecter) GetListItem(ctx interface{}, id interface{}) *MockListItemAdapter_GetListItem_Call {
	return &MockListItemAdapter_GetListItem_Call{Call: _e.mock.On("GetListItem", ctx, id)}
}

func (_c *MockListItemAdapter_GetListItem_Call) Run(run func(ctx context.Context, id int64)) *MockListItemAdapter_GetListItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockListItemAdapter_GetListItem_Call) Return(_a0 adapter.ListItem, _a1 error) *MockListItemAdapter_GetListItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListItemAdapter_GetListItem_Call) RunAndReturn(run func(context.Context, int64) (adapter.ListItem, error)) *MockListItemAdapter_GetListItem_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListItemChecked provides a mock function with given fields: ctx, id, checked
func (_m *MockListItemAdapter) UpdateListItemChecked(ctx context.Context, id int64, checked bool) (adapter.ListItem, error) {
	ret := _m.Called(ctx, id, checked)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListItemChecked")
	}

	var r0 adapter.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) (adapter.ListItem, error)); ok {
		return rf(ctx, id, checked)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) adapter.ListItem); ok {
		r0 = rf(ctx, id, checked)
	} else {
		r0 = ret.Get(0).(adapter.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool) error); ok {
		r1 = rf(ctx, id, checked)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListItemAdapter_UpdateListItemChecked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListItemChecked'
type MockListItemAdapter_UpdateListItemChecked_Call struct {
	*mock.Call
}

// UpdateListItemChecked is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - checked bool
func (_e *MockListItemAdapter_Expecter) UpdateListItemChecked(ctx interface{}, id interface{}, checked interface{}) *MockListItemAdapter_UpdateListItemChecked_Call {
	return &MockListItemAdapter_UpdateListItemChecked_Call{Call: _e.mock.On("UpdateListItemChecked", ctx, id, checked)}
}

func (_c *MockListItemAdapter_UpdateListItemChecked_Call) Run(run func(ctx context.Context, id int64, checked bool)) *MockListItemAdapter_UpdateListItemChecked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(bool))
	})
	return _c
}

func (_c *MockListItemAdapter_UpdateListItemChecked_Call) Return(_a0 adapter.ListItem, _a1 error) *MockListItemAdapter_UpdateListItemChecked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListItemAdapter_UpdateListItemChecked_Call) RunAndReturn(run func(context.Context, int64, bool) (adapter.ListItem, error)) *MockListItemAdapter_UpdateListItemChecked_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListItemSort provides a mock function with given fields: ctx, id, sort
func (_m *MockListItemAdapter) UpdateListItemSort(ctx context.Context, id int64, sort int64) (adapter.ListItem, error) {
	ret := _m.Called(ctx, id, sort)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListItemSort")
	}

	var r0 adapter.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (adapter.ListItem, error)); ok {
		return rf(ctx, id, sort)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) adapter.ListItem); ok {
		r0 = rf(ctx, id, sort)
	} else {
		r0 = ret.Get(0).(adapter.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, id, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListItemAdapter_UpdateListItemSort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListItemSort'
type MockListItemAdapter_UpdateListItemSort_Call struct {
	*mock.Call
}

// UpdateListItemSort is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - sort int64
func (_e *MockListItemAdapter_Expecter) UpdateListItemSort(ctx interface{}, id interface{}, sort interface{}) *MockListItemAdapter_UpdateListItemSort_Call {
	return &MockListItemAdapter_UpdateListItemSort_Call{Call: _e.mock.On("UpdateListItemSort", ctx, id, sort)}
}

func (_c *MockListItemAdapter_UpdateListItemSort_Call) Run(run func(ctx context.Context, id int64, sort int64)) *MockListItemAdapter_UpdateListItemSort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockListItemAdapter_UpdateListItemSort_Call) Return(_a0 adapter.ListItem, _a1 error) *MockListItemAdapter_UpdateListItemSort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListItemAdapter_UpdateListItemSort_Call) RunAndReturn(run func(context.Context, int64, int64) (adapter.ListItem, error)) *MockListItemAdapter_UpdateListItemSort_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListItemText provides a mock function with given fields: ctx, id, content
func (_m *MockListItemAdapter) UpdateListItemText(ctx context.Context, id int64, content string) (adapter.ListItem, error) {
	ret := _m.Called(ctx, id, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListItemText")
	}

	var r0 adapter.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (adapter.ListItem, error)); ok {
		return rf(ctx, id, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) adapter.ListItem); ok {
		r0 = rf(ctx, id, content)
	} else {
		r0 = ret.Get(0).(adapter.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListItemAdapter_UpdateListItemText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListItemText'
type MockListItemAdapter_UpdateListItemText_Call struct {
	*mock.Call
}

// UpdateListItemText is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - content string
func (_e *MockListItemAdapter_Expecter) UpdateListItemText(ctx interface{}, id interface{}, content interface{}) *MockListItemAdapter_UpdateListItemText_Call {
	return &MockListItemAdapter_UpdateListItemText_Call{Call: _e.mock.On("UpdateListItemText", ctx, id, content)}
}

func (_c *MockListItemAdapter_UpdateListItemText_Call) Run(run func(ctx context.Context, id int64, content string)) *MockListItemAdapter_UpdateListItemText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockListItemAdapter_UpdateListItemText_Call) Return(_a0 adapter.ListItem, _a1 error) *MockListItemAdapter_UpdateListItemText_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListItemAdapter_UpdateListItemText_Call) RunAndReturn(run func(context.Context, int64, string) (adapter.ListItem, error)) *MockListItemAdapter_UpdateListItemText_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListItemAdapter creates a new instance of MockListItemAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListItemAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListItemAdapter {
	mock := &MockListItemAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
