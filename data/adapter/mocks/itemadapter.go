// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/superlinkx/HomeList/app/model"
)

// MockItemAdapter is an autogenerated mock type for the ItemAdapter type
type MockItemAdapter struct {
	mock.Mock
}

type MockItemAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockItemAdapter) EXPECT() *MockItemAdapter_Expecter {
	return &MockItemAdapter_Expecter{mock: &_m.Mock}
}

// AllItemsFromListPaginated provides a mock function with given fields: ctx, listID, limit, offset
func (_m *MockItemAdapter) AllItemsFromListPaginated(ctx context.Context, listID int64, limit int32, offset int32) ([]model.Item, error) {
	ret := _m.Called(ctx, listID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for AllItemsFromListPaginated")
	}

	var r0 []model.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32, int32) ([]model.Item, error)); ok {
		return rf(ctx, listID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32, int32) []model.Item); ok {
		r0 = rf(ctx, listID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int32, int32) error); ok {
		r1 = rf(ctx, listID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockItemAdapter_AllItemsFromListPaginated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllItemsFromListPaginated'
type MockItemAdapter_AllItemsFromListPaginated_Call struct {
	*mock.Call
}

// AllItemsFromListPaginated is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - limit int32
//   - offset int32
func (_e *MockItemAdapter_Expecter) AllItemsFromListPaginated(ctx interface{}, listID interface{}, limit interface{}, offset interface{}) *MockItemAdapter_AllItemsFromListPaginated_Call {
	return &MockItemAdapter_AllItemsFromListPaginated_Call{Call: _e.mock.On("AllItemsFromListPaginated", ctx, listID, limit, offset)}
}

func (_c *MockItemAdapter_AllItemsFromListPaginated_Call) Run(run func(ctx context.Context, listID int64, limit int32, offset int32)) *MockItemAdapter_AllItemsFromListPaginated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int32), args[3].(int32))
	})
	return _c
}

func (_c *MockItemAdapter_AllItemsFromListPaginated_Call) Return(_a0 []model.Item, _a1 error) *MockItemAdapter_AllItemsFromListPaginated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockItemAdapter_AllItemsFromListPaginated_Call) RunAndReturn(run func(context.Context, int64, int32, int32) ([]model.Item, error)) *MockItemAdapter_AllItemsFromListPaginated_Call {
	_c.Call.Return(run)
	return _c
}

// CreateItemOnList provides a mock function with given fields: ctx, listID, content, sort
func (_m *MockItemAdapter) CreateItemOnList(ctx context.Context, listID int64, content string, sort int64) (model.Item, error) {
	ret := _m.Called(ctx, listID, content, sort)

	if len(ret) == 0 {
		panic("no return value specified for CreateItemOnList")
	}

	var r0 model.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, int64) (model.Item, error)); ok {
		return rf(ctx, listID, content, sort)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, int64) model.Item); ok {
		r0 = rf(ctx, listID, content, sort)
	} else {
		r0 = ret.Get(0).(model.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, int64) error); ok {
		r1 = rf(ctx, listID, content, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockItemAdapter_CreateItemOnList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateItemOnList'
type MockItemAdapter_CreateItemOnList_Call struct {
	*mock.Call
}

// CreateItemOnList is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - content string
//   - sort int64
func (_e *MockItemAdapter_Expecter) CreateItemOnList(ctx interface{}, listID interface{}, content interface{}, sort interface{}) *MockItemAdapter_CreateItemOnList_Call {
	return &MockItemAdapter_CreateItemOnList_Call{Call: _e.mock.On("CreateItemOnList", ctx, listID, content, sort)}
}

func (_c *MockItemAdapter_CreateItemOnList_Call) Run(run func(ctx context.Context, listID int64, content string, sort int64)) *MockItemAdapter_CreateItemOnList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *MockItemAdapter_CreateItemOnList_Call) Return(_a0 model.Item, _a1 error) *MockItemAdapter_CreateItemOnList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockItemAdapter_CreateItemOnList_Call) RunAndReturn(run func(context.Context, int64, string, int64) (model.Item, error)) *MockItemAdapter_CreateItemOnList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteItemFromList provides a mock function with given fields: ctx, listID, itemID
func (_m *MockItemAdapter) DeleteItemFromList(ctx context.Context, listID int64, itemID int64) error {
	ret := _m.Called(ctx, listID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItemFromList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, listID, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockItemAdapter_DeleteItemFromList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteItemFromList'
type MockItemAdapter_DeleteItemFromList_Call struct {
	*mock.Call
}

// DeleteItemFromList is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - itemID int64
func (_e *MockItemAdapter_Expecter) DeleteItemFromList(ctx interface{}, listID interface{}, itemID interface{}) *MockItemAdapter_DeleteItemFromList_Call {
	return &MockItemAdapter_DeleteItemFromList_Call{Call: _e.mock.On("DeleteItemFromList", ctx, listID, itemID)}
}

func (_c *MockItemAdapter_DeleteItemFromList_Call) Run(run func(ctx context.Context, listID int64, itemID int64)) *MockItemAdapter_DeleteItemFromList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockItemAdapter_DeleteItemFromList_Call) Return(_a0 error) *MockItemAdapter_DeleteItemFromList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockItemAdapter_DeleteItemFromList_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockItemAdapter_DeleteItemFromList_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemFromList provides a mock function with given fields: ctx, listID, itemID
func (_m *MockItemAdapter) GetItemFromList(ctx context.Context, listID int64, itemID int64) (model.Item, error) {
	ret := _m.Called(ctx, listID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for GetItemFromList")
	}

	var r0 model.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (model.Item, error)); ok {
		return rf(ctx, listID, itemID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) model.Item); ok {
		r0 = rf(ctx, listID, itemID)
	} else {
		r0 = ret.Get(0).(model.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, listID, itemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockItemAdapter_GetItemFromList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemFromList'
type MockItemAdapter_GetItemFromList_Call struct {
	*mock.Call
}

// GetItemFromList is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - itemID int64
func (_e *MockItemAdapter_Expecter) GetItemFromList(ctx interface{}, listID interface{}, itemID interface{}) *MockItemAdapter_GetItemFromList_Call {
	return &MockItemAdapter_GetItemFromList_Call{Call: _e.mock.On("GetItemFromList", ctx, listID, itemID)}
}

func (_c *MockItemAdapter_GetItemFromList_Call) Run(run func(ctx context.Context, listID int64, itemID int64)) *MockItemAdapter_GetItemFromList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockItemAdapter_GetItemFromList_Call) Return(_a0 model.Item, _a1 error) *MockItemAdapter_GetItemFromList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockItemAdapter_GetItemFromList_Call) RunAndReturn(run func(context.Context, int64, int64) (model.Item, error)) *MockItemAdapter_GetItemFromList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateItemFromListChecked provides a mock function with given fields: ctx, listID, itemID, checked
func (_m *MockItemAdapter) UpdateItemFromListChecked(ctx context.Context, listID int64, itemID int64, checked bool) (model.Item, error) {
	ret := _m.Called(ctx, listID, itemID, checked)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItemFromListChecked")
	}

	var r0 model.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, bool) (model.Item, error)); ok {
		return rf(ctx, listID, itemID, checked)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, bool) model.Item); ok {
		r0 = rf(ctx, listID, itemID, checked)
	} else {
		r0 = ret.Get(0).(model.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, bool) error); ok {
		r1 = rf(ctx, listID, itemID, checked)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockItemAdapter_UpdateItemFromListChecked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateItemFromListChecked'
type MockItemAdapter_UpdateItemFromListChecked_Call struct {
	*mock.Call
}

// UpdateItemFromListChecked is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - itemID int64
//   - checked bool
func (_e *MockItemAdapter_Expecter) UpdateItemFromListChecked(ctx interface{}, listID interface{}, itemID interface{}, checked interface{}) *MockItemAdapter_UpdateItemFromListChecked_Call {
	return &MockItemAdapter_UpdateItemFromListChecked_Call{Call: _e.mock.On("UpdateItemFromListChecked", ctx, listID, itemID, checked)}
}

func (_c *MockItemAdapter_UpdateItemFromListChecked_Call) Run(run func(ctx context.Context, listID int64, itemID int64, checked bool)) *MockItemAdapter_UpdateItemFromListChecked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(bool))
	})
	return _c
}

func (_c *MockItemAdapter_UpdateItemFromListChecked_Call) Return(_a0 model.Item, _a1 error) *MockItemAdapter_UpdateItemFromListChecked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockItemAdapter_UpdateItemFromListChecked_Call) RunAndReturn(run func(context.Context, int64, int64, bool) (model.Item, error)) *MockItemAdapter_UpdateItemFromListChecked_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateItemFromListContent provides a mock function with given fields: ctx, listID, itemID, content
func (_m *MockItemAdapter) UpdateItemFromListContent(ctx context.Context, listID int64, itemID int64, content string) (model.Item, error) {
	ret := _m.Called(ctx, listID, itemID, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItemFromListContent")
	}

	var r0 model.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) (model.Item, error)); ok {
		return rf(ctx, listID, itemID, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) model.Item); ok {
		r0 = rf(ctx, listID, itemID, content)
	} else {
		r0 = ret.Get(0).(model.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string) error); ok {
		r1 = rf(ctx, listID, itemID, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockItemAdapter_UpdateItemFromListContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateItemFromListContent'
type MockItemAdapter_UpdateItemFromListContent_Call struct {
	*mock.Call
}

// UpdateItemFromListContent is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - itemID int64
//   - content string
func (_e *MockItemAdapter_Expecter) UpdateItemFromListContent(ctx interface{}, listID interface{}, itemID interface{}, content interface{}) *MockItemAdapter_UpdateItemFromListContent_Call {
	return &MockItemAdapter_UpdateItemFromListContent_Call{Call: _e.mock.On("UpdateItemFromListContent", ctx, listID, itemID, content)}
}

func (_c *MockItemAdapter_UpdateItemFromListContent_Call) Run(run func(ctx context.Context, listID int64, itemID int64, content string)) *MockItemAdapter_UpdateItemFromListContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(string))
	})
	return _c
}

func (_c *MockItemAdapter_UpdateItemFromListContent_Call) Return(_a0 model.Item, _a1 error) *MockItemAdapter_UpdateItemFromListContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockItemAdapter_UpdateItemFromListContent_Call) RunAndReturn(run func(context.Context, int64, int64, string) (model.Item, error)) *MockItemAdapter_UpdateItemFromListContent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateItemFromListSort provides a mock function with given fields: ctx, listID, itemID, sort
func (_m *MockItemAdapter) UpdateItemFromListSort(ctx context.Context, listID int64, itemID int64, sort int64) (model.Item, error) {
	ret := _m.Called(ctx, listID, itemID, sort)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItemFromListSort")
	}

	var r0 model.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) (model.Item, error)); ok {
		return rf(ctx, listID, itemID, sort)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) model.Item); ok {
		r0 = rf(ctx, listID, itemID, sort)
	} else {
		r0 = ret.Get(0).(model.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64) error); ok {
		r1 = rf(ctx, listID, itemID, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockItemAdapter_UpdateItemFromListSort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateItemFromListSort'
type MockItemAdapter_UpdateItemFromListSort_Call struct {
	*mock.Call
}

// UpdateItemFromListSort is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - itemID int64
//   - sort int64
func (_e *MockItemAdapter_Expecter) UpdateItemFromListSort(ctx interface{}, listID interface{}, itemID interface{}, sort interface{}) *MockItemAdapter_UpdateItemFromListSort_Call {
	return &MockItemAdapter_UpdateItemFromListSort_Call{Call: _e.mock.On("UpdateItemFromListSort", ctx, listID, itemID, sort)}
}

func (_c *MockItemAdapter_UpdateItemFromListSort_Call) Run(run func(ctx context.Context, listID int64, itemID int64, sort int64)) *MockItemAdapter_UpdateItemFromListSort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockItemAdapter_UpdateItemFromListSort_Call) Return(_a0 model.Item, _a1 error) *MockItemAdapter_UpdateItemFromListSort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockItemAdapter_UpdateItemFromListSort_Call) RunAndReturn(run func(context.Context, int64, int64, int64) (model.Item, error)) *MockItemAdapter_UpdateItemFromListSort_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockItemAdapter creates a new instance of MockItemAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockItemAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockItemAdapter {
	mock := &MockItemAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
