// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	adapter "github.com/superlinkx/HomeList/data/adapter"

	mock "github.com/stretchr/testify/mock"
)

// MockAdapter is an autogenerated mock type for the Adapter type
type MockAdapter struct {
	mock.Mock
}

type MockAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdapter) EXPECT() *MockAdapter_Expecter {
	return &MockAdapter_Expecter{mock: &_m.Mock}
}

// AllItemsFromList provides a mock function with given fields: ctx, listID, limit
func (_m *MockAdapter) AllItemsFromList(ctx context.Context, listID int64, limit int32) ([]adapter.ListItem, error) {
	ret := _m.Called(ctx, listID, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllItemsFromList")
	}

	var r0 []adapter.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32) ([]adapter.ListItem, error)); ok {
		return rf(ctx, listID, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32) []adapter.ListItem); ok {
		r0 = rf(ctx, listID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adapter.ListItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int32) error); ok {
		r1 = rf(ctx, listID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_AllItemsFromList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllItemsFromList'
type MockAdapter_AllItemsFromList_Call struct {
	*mock.Call
}

// AllItemsFromList is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - limit int32
func (_e *MockAdapter_Expecter) AllItemsFromList(ctx interface{}, listID interface{}, limit interface{}) *MockAdapter_AllItemsFromList_Call {
	return &MockAdapter_AllItemsFromList_Call{Call: _e.mock.On("AllItemsFromList", ctx, listID, limit)}
}

func (_c *MockAdapter_AllItemsFromList_Call) Run(run func(ctx context.Context, listID int64, limit int32)) *MockAdapter_AllItemsFromList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int32))
	})
	return _c
}

func (_c *MockAdapter_AllItemsFromList_Call) Return(_a0 []adapter.ListItem, _a1 error) *MockAdapter_AllItemsFromList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_AllItemsFromList_Call) RunAndReturn(run func(context.Context, int64, int32) ([]adapter.ListItem, error)) *MockAdapter_AllItemsFromList_Call {
	_c.Call.Return(run)
	return _c
}

// AllLists provides a mock function with given fields: ctx, limit
func (_m *MockAdapter) AllLists(ctx context.Context, limit int32) ([]adapter.List, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllLists")
	}

	var r0 []adapter.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]adapter.List, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []adapter.List); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adapter.List)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_AllLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllLists'
type MockAdapter_AllLists_Call struct {
	*mock.Call
}

// AllLists is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int32
func (_e *MockAdapter_Expecter) AllLists(ctx interface{}, limit interface{}) *MockAdapter_AllLists_Call {
	return &MockAdapter_AllLists_Call{Call: _e.mock.On("AllLists", ctx, limit)}
}

func (_c *MockAdapter_AllLists_Call) Run(run func(ctx context.Context, limit int32)) *MockAdapter_AllLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockAdapter_AllLists_Call) Return(_a0 []adapter.List, _a1 error) *MockAdapter_AllLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_AllLists_Call) RunAndReturn(run func(context.Context, int32) ([]adapter.List, error)) *MockAdapter_AllLists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateList provides a mock function with given fields: ctx, name
func (_m *MockAdapter) CreateList(ctx context.Context, name string) (adapter.List, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateList")
	}

	var r0 adapter.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (adapter.List, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) adapter.List); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(adapter.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_CreateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateList'
type MockAdapter_CreateList_Call struct {
	*mock.Call
}

// CreateList is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAdapter_Expecter) CreateList(ctx interface{}, name interface{}) *MockAdapter_CreateList_Call {
	return &MockAdapter_CreateList_Call{Call: _e.mock.On("CreateList", ctx, name)}
}

func (_c *MockAdapter_CreateList_Call) Run(run func(ctx context.Context, name string)) *MockAdapter_CreateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAdapter_CreateList_Call) Return(_a0 adapter.List, _a1 error) *MockAdapter_CreateList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_CreateList_Call) RunAndReturn(run func(context.Context, string) (adapter.List, error)) *MockAdapter_CreateList_Call {
	_c.Call.Return(run)
	return _c
}

// CreateListItem provides a mock function with given fields: ctx, listID, content, sort
func (_m *MockAdapter) CreateListItem(ctx context.Context, listID int64, content string, sort int64) (adapter.ListItem, error) {
	ret := _m.Called(ctx, listID, content, sort)

	if len(ret) == 0 {
		panic("no return value specified for CreateListItem")
	}

	var r0 adapter.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, int64) (adapter.ListItem, error)); ok {
		return rf(ctx, listID, content, sort)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, int64) adapter.ListItem); ok {
		r0 = rf(ctx, listID, content, sort)
	} else {
		r0 = ret.Get(0).(adapter.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, int64) error); ok {
		r1 = rf(ctx, listID, content, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_CreateListItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateListItem'
type MockAdapter_CreateListItem_Call struct {
	*mock.Call
}

// CreateListItem is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - content string
//   - sort int64
func (_e *MockAdapter_Expecter) CreateListItem(ctx interface{}, listID interface{}, content interface{}, sort interface{}) *MockAdapter_CreateListItem_Call {
	return &MockAdapter_CreateListItem_Call{Call: _e.mock.On("CreateListItem", ctx, listID, content, sort)}
}

func (_c *MockAdapter_CreateListItem_Call) Run(run func(ctx context.Context, listID int64, content string, sort int64)) *MockAdapter_CreateListItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *MockAdapter_CreateListItem_Call) Return(_a0 adapter.ListItem, _a1 error) *MockAdapter_CreateListItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_CreateListItem_Call) RunAndReturn(run func(context.Context, int64, string, int64) (adapter.ListItem, error)) *MockAdapter_CreateListItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteList provides a mock function with given fields: ctx, id
func (_m *MockAdapter) DeleteList(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdapter_DeleteList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteList'
type MockAdapter_DeleteList_Call struct {
	*mock.Call
}

// DeleteList is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAdapter_Expecter) DeleteList(ctx interface{}, id interface{}) *MockAdapter_DeleteList_Call {
	return &MockAdapter_DeleteList_Call{Call: _e.mock.On("DeleteList", ctx, id)}
}

func (_c *MockAdapter_DeleteList_Call) Run(run func(ctx context.Context, id int64)) *MockAdapter_DeleteList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAdapter_DeleteList_Call) Return(_a0 error) *MockAdapter_DeleteList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_DeleteList_Call) RunAndReturn(run func(context.Context, int64) error) *MockAdapter_DeleteList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteListItem provides a mock function with given fields: ctx, id
func (_m *MockAdapter) DeleteListItem(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteListItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdapter_DeleteListItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteListItem'
type MockAdapter_DeleteListItem_Call struct {
	*mock.Call
}

// DeleteListItem is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAdapter_Expecter) DeleteListItem(ctx interface{}, id interface{}) *MockAdapter_DeleteListItem_Call {
	return &MockAdapter_DeleteListItem_Call{Call: _e.mock.On("DeleteListItem", ctx, id)}
}

func (_c *MockAdapter_DeleteListItem_Call) Run(run func(ctx context.Context, id int64)) *MockAdapter_DeleteListItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAdapter_DeleteListItem_Call) Return(_a0 error) *MockAdapter_DeleteListItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_DeleteListItem_Call) RunAndReturn(run func(context.Context, int64) error) *MockAdapter_DeleteListItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, id
func (_m *MockAdapter) GetList(ctx context.Context, id int64) (adapter.List, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 adapter.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (adapter.List, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) adapter.List); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(adapter.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type MockAdapter_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAdapter_Expecter) GetList(ctx interface{}, id interface{}) *MockAdapter_GetList_Call {
	return &MockAdapter_GetList_Call{Call: _e.mock.On("GetList", ctx, id)}
}

func (_c *MockAdapter_GetList_Call) Run(run func(ctx context.Context, id int64)) *MockAdapter_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAdapter_GetList_Call) Return(_a0 adapter.List, _a1 error) *MockAdapter_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_GetList_Call) RunAndReturn(run func(context.Context, int64) (adapter.List, error)) *MockAdapter_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// GetListItem provides a mock function with given fields: ctx, id
func (_m *MockAdapter) GetListItem(ctx context.Context, id int64) (adapter.ListItem, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetListItem")
	}

	var r0 adapter.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (adapter.ListItem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) adapter.ListItem); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(adapter.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_GetListItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListItem'
type MockAdapter_GetListItem_Call struct {
	*mock.Call
}

// GetListItem is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAdapter_Expecter) GetListItem(ctx interface{}, id interface{}) *MockAdapter_GetListItem_Call {
	return &MockAdapter_GetListItem_Call{Call: _e.mock.On("GetListItem", ctx, id)}
}

func (_c *MockAdapter_GetListItem_Call) Run(run func(ctx context.Context, id int64)) *MockAdapter_GetListItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAdapter_GetListItem_Call) Return(_a0 adapter.ListItem, _a1 error) *MockAdapter_GetListItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_GetListItem_Call) RunAndReturn(run func(context.Context, int64) (adapter.ListItem, error)) *MockAdapter_GetListItem_Call {
	_c.Call.Return(run)
	return _c
}

// RenameList provides a mock function with given fields: ctx, id, name
func (_m *MockAdapter) RenameList(ctx context.Context, id int64, name string) (adapter.List, error) {
	ret := _m.Called(ctx, id, name)

	if len(ret) == 0 {
		panic("no return value specified for RenameList")
	}

	var r0 adapter.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (adapter.List, error)); ok {
		return rf(ctx, id, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) adapter.List); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Get(0).(adapter.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_RenameList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameList'
type MockAdapter_RenameList_Call struct {
	*mock.Call
}

// RenameList is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - name string
func (_e *MockAdapter_Expecter) RenameList(ctx interface{}, id interface{}, name interface{}) *MockAdapter_RenameList_Call {
	return &MockAdapter_RenameList_Call{Call: _e.mock.On("RenameList", ctx, id, name)}
}

func (_c *MockAdapter_RenameList_Call) Run(run func(ctx context.Context, id int64, name string)) *MockAdapter_RenameList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockAdapter_RenameList_Call) Return(_a0 adapter.List, _a1 error) *MockAdapter_RenameList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_RenameList_Call) RunAndReturn(run func(context.Context, int64, string) (adapter.List, error)) *MockAdapter_RenameList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListItemChecked provides a mock function with given fields: ctx, id, checked
func (_m *MockAdapter) UpdateListItemChecked(ctx context.Context, id int64, checked bool) (adapter.ListItem, error) {
	ret := _m.Called(ctx, id, checked)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListItemChecked")
	}

	var r0 adapter.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) (adapter.ListItem, error)); ok {
		return rf(ctx, id, checked)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) adapter.ListItem); ok {
		r0 = rf(ctx, id, checked)
	} else {
		r0 = ret.Get(0).(adapter.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool) error); ok {
		r1 = rf(ctx, id, checked)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_UpdateListItemChecked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListItemChecked'
type MockAdapter_UpdateListItemChecked_Call struct {
	*mock.Call
}

// UpdateListItemChecked is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - checked bool
func (_e *MockAdapter_Expecter) UpdateListItemChecked(ctx interface{}, id interface{}, checked interface{}) *MockAdapter_UpdateListItemChecked_Call {
	return &MockAdapter_UpdateListItemChecked_Call{Call: _e.mock.On("UpdateListItemChecked", ctx, id, checked)}
}

func (_c *MockAdapter_UpdateListItemChecked_Call) Run(run func(ctx context.Context, id int64, checked bool)) *MockAdapter_UpdateListItemChecked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(bool))
	})
	return _c
}

func (_c *MockAdapter_UpdateListItemChecked_Call) Return(_a0 adapter.ListItem, _a1 error) *MockAdapter_UpdateListItemChecked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_UpdateListItemChecked_Call) RunAndReturn(run func(context.Context, int64, bool) (adapter.ListItem, error)) *MockAdapter_UpdateListItemChecked_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListItemSort provides a mock function with given fields: ctx, id, sort
func (_m *MockAdapter) UpdateListItemSort(ctx context.Context, id int64, sort int64) (adapter.ListItem, error) {
	ret := _m.Called(ctx, id, sort)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListItemSort")
	}

	var r0 adapter.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (adapter.ListItem, error)); ok {
		return rf(ctx, id, sort)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) adapter.ListItem); ok {
		r0 = rf(ctx, id, sort)
	} else {
		r0 = ret.Get(0).(adapter.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, id, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_UpdateListItemSort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListItemSort'
type MockAdapter_UpdateListItemSort_Call struct {
	*mock.Call
}

// UpdateListItemSort is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - sort int64
func (_e *MockAdapter_Expecter) UpdateListItemSort(ctx interface{}, id interface{}, sort interface{}) *MockAdapter_UpdateListItemSort_Call {
	return &MockAdapter_UpdateListItemSort_Call{Call: _e.mock.On("UpdateListItemSort", ctx, id, sort)}
}

func (_c *MockAdapter_UpdateListItemSort_Call) Run(run func(ctx context.Context, id int64, sort int64)) *MockAdapter_UpdateListItemSort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockAdapter_UpdateListItemSort_Call) Return(_a0 adapter.ListItem, _a1 error) *MockAdapter_UpdateListItemSort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_UpdateListItemSort_Call) RunAndReturn(run func(context.Context, int64, int64) (adapter.ListItem, error)) *MockAdapter_UpdateListItemSort_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListItemText provides a mock function with given fields: ctx, id, content
func (_m *MockAdapter) UpdateListItemText(ctx context.Context, id int64, content string) (adapter.ListItem, error) {
	ret := _m.Called(ctx, id, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListItemText")
	}

	var r0 adapter.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (adapter.ListItem, error)); ok {
		return rf(ctx, id, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) adapter.ListItem); ok {
		r0 = rf(ctx, id, content)
	} else {
		r0 = ret.Get(0).(adapter.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAdapter_UpdateListItemText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListItemText'
type MockAdapter_UpdateListItemText_Call struct {
	*mock.Call
}

// UpdateListItemText is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - content string
func (_e *MockAdapter_Expecter) UpdateListItemText(ctx interface{}, id interface{}, content interface{}) *MockAdapter_UpdateListItemText_Call {
	return &MockAdapter_UpdateListItemText_Call{Call: _e.mock.On("UpdateListItemText", ctx, id, content)}
}

func (_c *MockAdapter_UpdateListItemText_Call) Run(run func(ctx context.Context, id int64, content string)) *MockAdapter_UpdateListItemText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockAdapter_UpdateListItemText_Call) Return(_a0 adapter.ListItem, _a1 error) *MockAdapter_UpdateListItemText_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAdapter_UpdateListItemText_Call) RunAndReturn(run func(context.Context, int64, string) (adapter.ListItem, error)) *MockAdapter_UpdateListItemText_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAdapter creates a new instance of MockAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdapter {
	mock := &MockAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
