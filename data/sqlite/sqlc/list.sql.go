// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: list.sql

package sqlc

import (
	"context"
)

const allLists = `-- name: AllLists :many
SELECT id, name FROM lists
ORDER BY id ASC
LIMIT ? OFFSET ?
`

type AllListsParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) AllLists(ctx context.Context, arg AllListsParams) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, allLists, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createList = `-- name: CreateList :one
INSERT INTO lists (name)
VALUES (?)
RETURNING id, name
`

func (q *Queries) CreateList(ctx context.Context, name string) (List, error) {
	row := q.db.QueryRowContext(ctx, createList, name)
	var i List
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM lists
WHERE id = ?
`

func (q *Queries) DeleteList(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteList, id)
	return err
}

const getList = `-- name: GetList :one
SELECT id, name FROM lists
WHERE id = ? LIMIT 1
`

func (q *Queries) GetList(ctx context.Context, id int64) (List, error) {
	row := q.db.QueryRowContext(ctx, getList, id)
	var i List
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const renameList = `-- name: RenameList :one
UPDATE lists
SET name = ?
WHERE id = ?
RETURNING id, name
`

type RenameListParams struct {
	Name string
	ID   int64
}

func (q *Queries) RenameList(ctx context.Context, arg RenameListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, renameList, arg.Name, arg.ID)
	var i List
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
