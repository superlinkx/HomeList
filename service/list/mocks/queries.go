// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	adapter "github.com/superlinkx/HomeList/data/adapter"

	mock "github.com/stretchr/testify/mock"
)

// MockQueries is an autogenerated mock type for the queries type
type MockQueries struct {
	mock.Mock
}

type MockQueries_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueries) EXPECT() *MockQueries_Expecter {
	return &MockQueries_Expecter{mock: &_m.Mock}
}

// AllLists provides a mock function with given fields: ctx, limit
func (_m *MockQueries) AllLists(ctx context.Context, limit int32) ([]adapter.List, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllLists")
	}

	var r0 []adapter.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]adapter.List, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []adapter.List); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adapter.List)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueries_AllLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllLists'
type MockQueries_AllLists_Call struct {
	*mock.Call
}

// AllLists is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int32
func (_e *MockQueries_Expecter) AllLists(ctx interface{}, limit interface{}) *MockQueries_AllLists_Call {
	return &MockQueries_AllLists_Call{Call: _e.mock.On("AllLists", ctx, limit)}
}

func (_c *MockQueries_AllLists_Call) Run(run func(ctx context.Context, limit int32)) *MockQueries_AllLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQueries_AllLists_Call) Return(_a0 []adapter.List, _a1 error) *MockQueries_AllLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueries_AllLists_Call) RunAndReturn(run func(context.Context, int32) ([]adapter.List, error)) *MockQueries_AllLists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateList provides a mock function with given fields: ctx, name
func (_m *MockQueries) CreateList(ctx context.Context, name string) (adapter.List, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateList")
	}

	var r0 adapter.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (adapter.List, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) adapter.List); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(adapter.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueries_CreateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateList'
type MockQueries_CreateList_Call struct {
	*mock.Call
}

// CreateList is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQueries_Expecter) CreateList(ctx interface{}, name interface{}) *MockQueries_CreateList_Call {
	return &MockQueries_CreateList_Call{Call: _e.mock.On("CreateList", ctx, name)}
}

func (_c *MockQueries_CreateList_Call) Run(run func(ctx context.Context, name string)) *MockQueries_CreateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQueries_CreateList_Call) Return(_a0 adapter.List, _a1 error) *MockQueries_CreateList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueries_CreateList_Call) RunAndReturn(run func(context.Context, string) (adapter.List, error)) *MockQueries_CreateList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteList provides a mock function with given fields: ctx, id
func (_m *MockQueries) DeleteList(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueries_DeleteList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteList'
type MockQueries_DeleteList_Call struct {
	*mock.Call
}

// DeleteList is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockQueries_Expecter) DeleteList(ctx interface{}, id interface{}) *MockQueries_DeleteList_Call {
	return &MockQueries_DeleteList_Call{Call: _e.mock.On("DeleteList", ctx, id)}
}

func (_c *MockQueries_DeleteList_Call) Run(run func(ctx context.Context, id int64)) *MockQueries_DeleteList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQueries_DeleteList_Call) Return(_a0 error) *MockQueries_DeleteList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueries_DeleteList_Call) RunAndReturn(run func(context.Context, int64) error) *MockQueries_DeleteList_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, id
func (_m *MockQueries) GetList(ctx context.Context, id int64) (adapter.List, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 adapter.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (adapter.List, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) adapter.List); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(adapter.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueries_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type MockQueries_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockQueries_Expecter) GetList(ctx interface{}, id interface{}) *MockQueries_GetList_Call {
	return &MockQueries_GetList_Call{Call: _e.mock.On("GetList", ctx, id)}
}

func (_c *MockQueries_GetList_Call) Run(run func(ctx context.Context, id int64)) *MockQueries_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQueries_GetList_Call) Return(_a0 adapter.List, _a1 error) *MockQueries_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueries_GetList_Call) RunAndReturn(run func(context.Context, int64) (adapter.List, error)) *MockQueries_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// RenameList provides a mock function with given fields: ctx, id, name
func (_m *MockQueries) RenameList(ctx context.Context, id int64, name string) (adapter.List, error) {
	ret := _m.Called(ctx, id, name)

	if len(ret) == 0 {
		panic("no return value specified for RenameList")
	}

	var r0 adapter.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (adapter.List, error)); ok {
		return rf(ctx, id, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) adapter.List); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Get(0).(adapter.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQueries_RenameList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameList'
type MockQueries_RenameList_Call struct {
	*mock.Call
}

// RenameList is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - name string
func (_e *MockQueries_Expecter) RenameList(ctx interface{}, id interface{}, name interface{}) *MockQueries_RenameList_Call {
	return &MockQueries_RenameList_Call{Call: _e.mock.On("RenameList", ctx, id, name)}
}

func (_c *MockQueries_RenameList_Call) Run(run func(ctx context.Context, id int64, name string)) *MockQueries_RenameList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockQueries_RenameList_Call) Return(_a0 adapter.List, _a1 error) *MockQueries_RenameList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQueries_RenameList_Call) RunAndReturn(run func(context.Context, int64, string) (adapter.List, error)) *MockQueries_RenameList_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueries creates a new instance of MockQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueries(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueries {
	mock := &MockQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
