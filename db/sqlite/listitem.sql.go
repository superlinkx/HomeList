// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: listitem.sql

package sqlite

import (
	"context"
)

const allItemsFromList = `-- name: AllItemsFromList :many
SELECT id, list_id, content, checked, sort FROM list_items
WHERE list_id = ?
ORDER BY sort ASC
LIMIT ?
`

type AllItemsFromListParams struct {
	ListID int64
	Limit  int64
}

func (q *Queries) AllItemsFromList(ctx context.Context, arg AllItemsFromListParams) ([]ListItem, error) {
	rows, err := q.db.QueryContext(ctx, allItemsFromList, arg.ListID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListItem
	for rows.Next() {
		var i ListItem
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.Content,
			&i.Checked,
			&i.Sort,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createListItem = `-- name: CreateListItem :one
INSERT INTO list_items (list_id, content, sort)
VALUES (?, ?, ?)
RETURNING id, list_id, content, checked, sort
`

type CreateListItemParams struct {
	ListID  int64
	Content string
	Sort    int64
}

func (q *Queries) CreateListItem(ctx context.Context, arg CreateListItemParams) (ListItem, error) {
	row := q.db.QueryRowContext(ctx, createListItem, arg.ListID, arg.Content, arg.Sort)
	var i ListItem
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Content,
		&i.Checked,
		&i.Sort,
	)
	return i, err
}

const deleteListItem = `-- name: DeleteListItem :exec
DELETE FROM list_items
WHERE id = ?
`

func (q *Queries) DeleteListItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteListItem, id)
	return err
}

const getListItem = `-- name: GetListItem :one
SELECT id, list_id, content, checked, sort FROM list_items
WHERE id = ? LIMIT 1
`

func (q *Queries) GetListItem(ctx context.Context, id int64) (ListItem, error) {
	row := q.db.QueryRowContext(ctx, getListItem, id)
	var i ListItem
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Content,
		&i.Checked,
		&i.Sort,
	)
	return i, err
}

const updateListItemSort = `-- name: UpdateListItemSort :one
UPDATE list_items
SET sort = ?
WHERE id = ?
RETURNING id, list_id, content, checked, sort
`

type UpdateListItemSortParams struct {
	Sort int64
	ID   int64
}

func (q *Queries) UpdateListItemSort(ctx context.Context, arg UpdateListItemSortParams) (ListItem, error) {
	row := q.db.QueryRowContext(ctx, updateListItemSort, arg.Sort, arg.ID)
	var i ListItem
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Content,
		&i.Checked,
		&i.Sort,
	)
	return i, err
}

const updateListItemText = `-- name: UpdateListItemText :one
UPDATE list_items
SET content = ?
WHERE id = ?
RETURNING id, list_id, content, checked, sort
`

type UpdateListItemTextParams struct {
	Content string
	ID      int64
}

func (q *Queries) UpdateListItemText(ctx context.Context, arg UpdateListItemTextParams) (ListItem, error) {
	row := q.db.QueryRowContext(ctx, updateListItemText, arg.Content, arg.ID)
	var i ListItem
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Content,
		&i.Checked,
		&i.Sort,
	)
	return i, err
}
