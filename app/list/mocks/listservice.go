// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	list "github.com/superlinkx/HomeList/service/list"
)

// MockListService is an autogenerated mock type for the ListService type
type MockListService struct {
	mock.Mock
}

type MockListService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListService) EXPECT() *MockListService_Expecter {
	return &MockListService_Expecter{mock: &_m.Mock}
}

// AllLists provides a mock function with given fields: ctx, limit
func (_m *MockListService) AllLists(ctx context.Context, limit int64) ([]list.List, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for AllLists")
	}

	var r0 []list.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]list.List, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []list.List); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]list.List)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListService_AllLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllLists'
type MockListService_AllLists_Call struct {
	*mock.Call
}

// AllLists is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
func (_e *MockListService_Expecter) AllLists(ctx interface{}, limit interface{}) *MockListService_AllLists_Call {
	return &MockListService_AllLists_Call{Call: _e.mock.On("AllLists", ctx, limit)}
}

func (_c *MockListService_AllLists_Call) Run(run func(ctx context.Context, limit int64)) *MockListService_AllLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockListService_AllLists_Call) Return(_a0 []list.List, _a1 error) *MockListService_AllLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListService_AllLists_Call) RunAndReturn(run func(context.Context, int64) ([]list.List, error)) *MockListService_AllLists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateList provides a mock function with given fields: ctx, name
func (_m *MockListService) CreateList(ctx context.Context, name string) (list.List, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateList")
	}

	var r0 list.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (list.List, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) list.List); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(list.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListService_CreateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateList'
type MockListService_CreateList_Call struct {
	*mock.Call
}

// CreateList is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockListService_Expecter) CreateList(ctx interface{}, name interface{}) *MockListService_CreateList_Call {
	return &MockListService_CreateList_Call{Call: _e.mock.On("CreateList", ctx, name)}
}

func (_c *MockListService_CreateList_Call) Run(run func(ctx context.Context, name string)) *MockListService_CreateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockListService_CreateList_Call) Return(_a0 list.List, _a1 error) *MockListService_CreateList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListService_CreateList_Call) RunAndReturn(run func(context.Context, string) (list.List, error)) *MockListService_CreateList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteList provides a mock function with given fields: ctx, id
func (_m *MockListService) DeleteList(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockListService_DeleteList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteList'
type MockListService_DeleteList_Call struct {
	*mock.Call
}

// DeleteList is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockListService_Expecter) DeleteList(ctx interface{}, id interface{}) *MockListService_DeleteList_Call {
	return &MockListService_DeleteList_Call{Call: _e.mock.On("DeleteList", ctx, id)}
}

func (_c *MockListService_DeleteList_Call) Run(run func(ctx context.Context, id int64)) *MockListService_DeleteList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockListService_DeleteList_Call) Return(_a0 error) *MockListService_DeleteList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockListService_DeleteList_Call) RunAndReturn(run func(context.Context, int64) error) *MockListService_DeleteList_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, id
func (_m *MockListService) GetList(ctx context.Context, id int64) (list.List, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 list.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (list.List, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) list.List); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(list.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListService_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type MockListService_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockListService_Expecter) GetList(ctx interface{}, id interface{}) *MockListService_GetList_Call {
	return &MockListService_GetList_Call{Call: _e.mock.On("GetList", ctx, id)}
}

func (_c *MockListService_GetList_Call) Run(run func(ctx context.Context, id int64)) *MockListService_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockListService_GetList_Call) Return(_a0 list.List, _a1 error) *MockListService_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListService_GetList_Call) RunAndReturn(run func(context.Context, int64) (list.List, error)) *MockListService_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateList provides a mock function with given fields: ctx, id, name
func (_m *MockListService) UpdateList(ctx context.Context, id int64, name string) (list.List, error) {
	ret := _m.Called(ctx, id, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateList")
	}

	var r0 list.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (list.List, error)); ok {
		return rf(ctx, id, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) list.List); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Get(0).(list.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListService_UpdateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateList'
type MockListService_UpdateList_Call struct {
	*mock.Call
}

// UpdateList is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - name string
func (_e *MockListService_Expecter) UpdateList(ctx interface{}, id interface{}, name interface{}) *MockListService_UpdateList_Call {
	return &MockListService_UpdateList_Call{Call: _e.mock.On("UpdateList", ctx, id, name)}
}

func (_c *MockListService_UpdateList_Call) Run(run func(ctx context.Context, id int64, name string)) *MockListService_UpdateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockListService_UpdateList_Call) Return(_a0 list.List, _a1 error) *MockListService_UpdateList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListService_UpdateList_Call) RunAndReturn(run func(context.Context, int64, string) (list.List, error)) *MockListService_UpdateList_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListService creates a new instance of MockListService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListService {
	mock := &MockListService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
