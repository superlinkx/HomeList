// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	oapiclient "github.com/superlinkx/HomeList/oapiclient"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// DeleteListsListIDWithResponse provides a mock function with given fields: ctx, listID, reqEditors
func (_m *MockClientWithResponsesInterface) DeleteListsListIDWithResponse(ctx context.Context, listID int64, reqEditors ...oapiclient.RequestEditorFn) (*oapiclient.DeleteListsListIDResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, listID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteListsListIDWithResponse")
	}

	var r0 *oapiclient.DeleteListsListIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...oapiclient.RequestEditorFn) (*oapiclient.DeleteListsListIDResponse, error)); ok {
		return rf(ctx, listID, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...oapiclient.RequestEditorFn) *oapiclient.DeleteListsListIDResponse); ok {
		r0 = rf(ctx, listID, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiclient.DeleteListsListIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, listID, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DeleteListsListIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteListsListIDWithResponse'
type MockClientWithResponsesInterface_DeleteListsListIDWithResponse_Call struct {
	*mock.Call
}

// DeleteListsListIDWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DeleteListsListIDWithResponse(ctx interface{}, listID interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DeleteListsListIDWithResponse_Call {
	return &MockClientWithResponsesInterface_DeleteListsListIDWithResponse_Call{Call: _e.mock.On("DeleteListsListIDWithResponse",
		append([]interface{}{ctx, listID}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DeleteListsListIDWithResponse_Call) Run(run func(ctx context.Context, listID int64, reqEditors ...oapiclient.RequestEditorFn)) *MockClientWithResponsesInterface_DeleteListsListIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteListsListIDWithResponse_Call) Return(_a0 *oapiclient.DeleteListsListIDResponse, _a1 error) *MockClientWithResponsesInterface_DeleteListsListIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DeleteListsListIDWithResponse_Call) RunAndReturn(run func(context.Context, int64, ...oapiclient.RequestEditorFn) (*oapiclient.DeleteListsListIDResponse, error)) *MockClientWithResponsesInterface_DeleteListsListIDWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetListsListIDWithResponse provides a mock function with given fields: ctx, listID, reqEditors
func (_m *MockClientWithResponsesInterface) GetListsListIDWithResponse(ctx context.Context, listID int64, reqEditors ...oapiclient.RequestEditorFn) (*oapiclient.GetListsListIDResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, listID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetListsListIDWithResponse")
	}

	var r0 *oapiclient.GetListsListIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...oapiclient.RequestEditorFn) (*oapiclient.GetListsListIDResponse, error)); ok {
		return rf(ctx, listID, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...oapiclient.RequestEditorFn) *oapiclient.GetListsListIDResponse); ok {
		r0 = rf(ctx, listID, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiclient.GetListsListIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, listID, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetListsListIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListsListIDWithResponse'
type MockClientWithResponsesInterface_GetListsListIDWithResponse_Call struct {
	*mock.Call
}

// GetListsListIDWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetListsListIDWithResponse(ctx interface{}, listID interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetListsListIDWithResponse_Call {
	return &MockClientWithResponsesInterface_GetListsListIDWithResponse_Call{Call: _e.mock.On("GetListsListIDWithResponse",
		append([]interface{}{ctx, listID}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetListsListIDWithResponse_Call) Run(run func(ctx context.Context, listID int64, reqEditors ...oapiclient.RequestEditorFn)) *MockClientWithResponsesInterface_GetListsListIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetListsListIDWithResponse_Call) Return(_a0 *oapiclient.GetListsListIDResponse, _a1 error) *MockClientWithResponsesInterface_GetListsListIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetListsListIDWithResponse_Call) RunAndReturn(run func(context.Context, int64, ...oapiclient.RequestEditorFn) (*oapiclient.GetListsListIDResponse, error)) *MockClientWithResponsesInterface_GetListsListIDWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// GetListsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientWithResponsesInterface) GetListsWithResponse(ctx context.Context, params *oapiclient.GetListsParams, reqEditors ...oapiclient.RequestEditorFn) (*oapiclient.GetListsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetListsWithResponse")
	}

	var r0 *oapiclient.GetListsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *oapiclient.GetListsParams, ...oapiclient.RequestEditorFn) (*oapiclient.GetListsResponse, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *oapiclient.GetListsParams, ...oapiclient.RequestEditorFn) *oapiclient.GetListsResponse); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiclient.GetListsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *oapiclient.GetListsParams, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_GetListsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListsWithResponse'
type MockClientWithResponsesInterface_GetListsWithResponse_Call struct {
	*mock.Call
}

// GetListsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - params *oapiclient.GetListsParams
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) GetListsWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_GetListsWithResponse_Call {
	return &MockClientWithResponsesInterface_GetListsWithResponse_Call{Call: _e.mock.On("GetListsWithResponse",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_GetListsWithResponse_Call) Run(run func(ctx context.Context, params *oapiclient.GetListsParams, reqEditors ...oapiclient.RequestEditorFn)) *MockClientWithResponsesInterface_GetListsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*oapiclient.GetListsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_GetListsWithResponse_Call) Return(_a0 *oapiclient.GetListsResponse, _a1 error) *MockClientWithResponsesInterface_GetListsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_GetListsWithResponse_Call) RunAndReturn(run func(context.Context, *oapiclient.GetListsParams, ...oapiclient.RequestEditorFn) (*oapiclient.GetListsResponse, error)) *MockClientWithResponsesInterface_GetListsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostListsWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) PostListsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapiclient.RequestEditorFn) (*oapiclient.PostListsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostListsWithBodyWithResponse")
	}

	var r0 *oapiclient.PostListsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapiclient.RequestEditorFn) (*oapiclient.PostListsResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapiclient.RequestEditorFn) *oapiclient.PostListsResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiclient.PostListsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_PostListsWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostListsWithBodyWithResponse'
type MockClientWithResponsesInterface_PostListsWithBodyWithResponse_Call struct {
	*mock.Call
}

// PostListsWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) PostListsWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostListsWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_PostListsWithBodyWithResponse_Call{Call: _e.mock.On("PostListsWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostListsWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapiclient.RequestEditorFn)) *MockClientWithResponsesInterface_PostListsWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostListsWithBodyWithResponse_Call) Return(_a0 *oapiclient.PostListsResponse, _a1 error) *MockClientWithResponsesInterface_PostListsWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostListsWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...oapiclient.RequestEditorFn) (*oapiclient.PostListsResponse, error)) *MockClientWithResponsesInterface_PostListsWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PostListsWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockClientWithResponsesInterface) PostListsWithResponse(ctx context.Context, body oapiclient.PostListsJSONRequestBody, reqEditors ...oapiclient.RequestEditorFn) (*oapiclient.PostListsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostListsWithResponse")
	}

	var r0 *oapiclient.PostListsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oapiclient.PostListsJSONRequestBody, ...oapiclient.RequestEditorFn) (*oapiclient.PostListsResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oapiclient.PostListsJSONRequestBody, ...oapiclient.RequestEditorFn) *oapiclient.PostListsResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiclient.PostListsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oapiclient.PostListsJSONRequestBody, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_PostListsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostListsWithResponse'
type MockClientWithResponsesInterface_PostListsWithResponse_Call struct {
	*mock.Call
}

// PostListsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body oapiclient.PostListsJSONRequestBody
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) PostListsWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PostListsWithResponse_Call {
	return &MockClientWithResponsesInterface_PostListsWithResponse_Call{Call: _e.mock.On("PostListsWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PostListsWithResponse_Call) Run(run func(ctx context.Context, body oapiclient.PostListsJSONRequestBody, reqEditors ...oapiclient.RequestEditorFn)) *MockClientWithResponsesInterface_PostListsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(oapiclient.PostListsJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PostListsWithResponse_Call) Return(_a0 *oapiclient.PostListsResponse, _a1 error) *MockClientWithResponsesInterface_PostListsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_PostListsWithResponse_Call) RunAndReturn(run func(context.Context, oapiclient.PostListsJSONRequestBody, ...oapiclient.RequestEditorFn) (*oapiclient.PostListsResponse, error)) *MockClientWithResponsesInterface_PostListsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PutListsListIDWithBodyWithResponse provides a mock function with given fields: ctx, listID, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) PutListsListIDWithBodyWithResponse(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...oapiclient.RequestEditorFn) (*oapiclient.PutListsListIDResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, listID, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutListsListIDWithBodyWithResponse")
	}

	var r0 *oapiclient.PutListsListIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, io.Reader, ...oapiclient.RequestEditorFn) (*oapiclient.PutListsListIDResponse, error)); ok {
		return rf(ctx, listID, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, io.Reader, ...oapiclient.RequestEditorFn) *oapiclient.PutListsListIDResponse); ok {
		r0 = rf(ctx, listID, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiclient.PutListsListIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, io.Reader, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, listID, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_PutListsListIDWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutListsListIDWithBodyWithResponse'
type MockClientWithResponsesInterface_PutListsListIDWithBodyWithResponse_Call struct {
	*mock.Call
}

// PutListsListIDWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - contentType string
//   - body io.Reader
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) PutListsListIDWithBodyWithResponse(ctx interface{}, listID interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PutListsListIDWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_PutListsListIDWithBodyWithResponse_Call{Call: _e.mock.On("PutListsListIDWithBodyWithResponse",
		append([]interface{}{ctx, listID, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PutListsListIDWithBodyWithResponse_Call) Run(run func(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...oapiclient.RequestEditorFn)) *MockClientWithResponsesInterface_PutListsListIDWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PutListsListIDWithBodyWithResponse_Call) Return(_a0 *oapiclient.PutListsListIDResponse, _a1 error) *MockClientWithResponsesInterface_PutListsListIDWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_PutListsListIDWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, int64, string, io.Reader, ...oapiclient.RequestEditorFn) (*oapiclient.PutListsListIDResponse, error)) *MockClientWithResponsesInterface_PutListsListIDWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// PutListsListIDWithResponse provides a mock function with given fields: ctx, listID, body, reqEditors
func (_m *MockClientWithResponsesInterface) PutListsListIDWithResponse(ctx context.Context, listID int64, body oapiclient.PutListsListIDJSONRequestBody, reqEditors ...oapiclient.RequestEditorFn) (*oapiclient.PutListsListIDResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, listID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutListsListIDWithResponse")
	}

	var r0 *oapiclient.PutListsListIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, oapiclient.PutListsListIDJSONRequestBody, ...oapiclient.RequestEditorFn) (*oapiclient.PutListsListIDResponse, error)); ok {
		return rf(ctx, listID, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, oapiclient.PutListsListIDJSONRequestBody, ...oapiclient.RequestEditorFn) *oapiclient.PutListsListIDResponse); ok {
		r0 = rf(ctx, listID, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oapiclient.PutListsListIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, oapiclient.PutListsListIDJSONRequestBody, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, listID, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_PutListsListIDWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutListsListIDWithResponse'
type MockClientWithResponsesInterface_PutListsListIDWithResponse_Call struct {
	*mock.Call
}

// PutListsListIDWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - body oapiclient.PutListsListIDJSONRequestBody
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) PutListsListIDWithResponse(ctx interface{}, listID interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_PutListsListIDWithResponse_Call {
	return &MockClientWithResponsesInterface_PutListsListIDWithResponse_Call{Call: _e.mock.On("PutListsListIDWithResponse",
		append([]interface{}{ctx, listID, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_PutListsListIDWithResponse_Call) Run(run func(ctx context.Context, listID int64, body oapiclient.PutListsListIDJSONRequestBody, reqEditors ...oapiclient.RequestEditorFn)) *MockClientWithResponsesInterface_PutListsListIDWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int64), args[2].(oapiclient.PutListsListIDJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_PutListsListIDWithResponse_Call) Return(_a0 *oapiclient.PutListsListIDResponse, _a1 error) *MockClientWithResponsesInterface_PutListsListIDWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_PutListsListIDWithResponse_Call) RunAndReturn(run func(context.Context, int64, oapiclient.PutListsListIDJSONRequestBody, ...oapiclient.RequestEditorFn) (*oapiclient.PutListsListIDResponse, error)) *MockClientWithResponsesInterface_PutListsListIDWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
