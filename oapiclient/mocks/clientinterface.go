// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	oapiclient "github.com/superlinkx/HomeList/oapiclient"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// DeleteListsListID provides a mock function with given fields: ctx, listID, reqEditors
func (_m *MockClientInterface) DeleteListsListID(ctx context.Context, listID int64, reqEditors ...oapiclient.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, listID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteListsListID")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...oapiclient.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, listID, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...oapiclient.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, listID, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, listID, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_DeleteListsListID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteListsListID'
type MockClientInterface_DeleteListsListID_Call struct {
	*mock.Call
}

// DeleteListsListID is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientInterface_Expecter) DeleteListsListID(ctx interface{}, listID interface{}, reqEditors ...interface{}) *MockClientInterface_DeleteListsListID_Call {
	return &MockClientInterface_DeleteListsListID_Call{Call: _e.mock.On("DeleteListsListID",
		append([]interface{}{ctx, listID}, reqEditors...)...)}
}

func (_c *MockClientInterface_DeleteListsListID_Call) Run(run func(ctx context.Context, listID int64, reqEditors ...oapiclient.RequestEditorFn)) *MockClientInterface_DeleteListsListID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_DeleteListsListID_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_DeleteListsListID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_DeleteListsListID_Call) RunAndReturn(run func(context.Context, int64, ...oapiclient.RequestEditorFn) (*http.Response, error)) *MockClientInterface_DeleteListsListID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLists provides a mock function with given fields: ctx, params, reqEditors
func (_m *MockClientInterface) GetLists(ctx context.Context, params *oapiclient.GetListsParams, reqEditors ...oapiclient.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLists")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *oapiclient.GetListsParams, ...oapiclient.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *oapiclient.GetListsParams, ...oapiclient.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *oapiclient.GetListsParams, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLists'
type MockClientInterface_GetLists_Call struct {
	*mock.Call
}

// GetLists is a helper method to define mock.On call
//   - ctx context.Context
//   - params *oapiclient.GetListsParams
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetLists(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockClientInterface_GetLists_Call {
	return &MockClientInterface_GetLists_Call{Call: _e.mock.On("GetLists",
		append([]interface{}{ctx, params}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetLists_Call) Run(run func(ctx context.Context, params *oapiclient.GetListsParams, reqEditors ...oapiclient.RequestEditorFn)) *MockClientInterface_GetLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(*oapiclient.GetListsParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetLists_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetLists_Call) RunAndReturn(run func(context.Context, *oapiclient.GetListsParams, ...oapiclient.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetLists_Call {
	_c.Call.Return(run)
	return _c
}

// GetListsListID provides a mock function with given fields: ctx, listID, reqEditors
func (_m *MockClientInterface) GetListsListID(ctx context.Context, listID int64, reqEditors ...oapiclient.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, listID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetListsListID")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...oapiclient.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, listID, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, ...oapiclient.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, listID, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, listID, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetListsListID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListsListID'
type MockClientInterface_GetListsListID_Call struct {
	*mock.Call
}

// GetListsListID is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientInterface_Expecter) GetListsListID(ctx interface{}, listID interface{}, reqEditors ...interface{}) *MockClientInterface_GetListsListID_Call {
	return &MockClientInterface_GetListsListID_Call{Call: _e.mock.On("GetListsListID",
		append([]interface{}{ctx, listID}, reqEditors...)...)}
}

func (_c *MockClientInterface_GetListsListID_Call) Run(run func(ctx context.Context, listID int64, reqEditors ...oapiclient.RequestEditorFn)) *MockClientInterface_GetListsListID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int64), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_GetListsListID_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_GetListsListID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetListsListID_Call) RunAndReturn(run func(context.Context, int64, ...oapiclient.RequestEditorFn) (*http.Response, error)) *MockClientInterface_GetListsListID_Call {
	_c.Call.Return(run)
	return _c
}

// PostLists provides a mock function with given fields: ctx, body, reqEditors
func (_m *MockClientInterface) PostLists(ctx context.Context, body oapiclient.PostListsJSONRequestBody, reqEditors ...oapiclient.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostLists")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, oapiclient.PostListsJSONRequestBody, ...oapiclient.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, oapiclient.PostListsJSONRequestBody, ...oapiclient.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, oapiclient.PostListsJSONRequestBody, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostLists'
type MockClientInterface_PostLists_Call struct {
	*mock.Call
}

// PostLists is a helper method to define mock.On call
//   - ctx context.Context
//   - body oapiclient.PostListsJSONRequestBody
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostLists(ctx interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostLists_Call {
	return &MockClientInterface_PostLists_Call{Call: _e.mock.On("PostLists",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostLists_Call) Run(run func(ctx context.Context, body oapiclient.PostListsJSONRequestBody, reqEditors ...oapiclient.RequestEditorFn)) *MockClientInterface_PostLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(oapiclient.PostListsJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostLists_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostLists_Call) RunAndReturn(run func(context.Context, oapiclient.PostListsJSONRequestBody, ...oapiclient.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostLists_Call {
	_c.Call.Return(run)
	return _c
}

// PostListsWithBody provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *MockClientInterface) PostListsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapiclient.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostListsWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapiclient.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...oapiclient.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PostListsWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostListsWithBody'
type MockClientInterface_PostListsWithBody_Call struct {
	*mock.Call
}

// PostListsWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientInterface_Expecter) PostListsWithBody(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PostListsWithBody_Call {
	return &MockClientInterface_PostListsWithBody_Call{Call: _e.mock.On("PostListsWithBody",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PostListsWithBody_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...oapiclient.RequestEditorFn)) *MockClientInterface_PostListsWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PostListsWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PostListsWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PostListsWithBody_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...oapiclient.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PostListsWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// PutListsListID provides a mock function with given fields: ctx, listID, body, reqEditors
func (_m *MockClientInterface) PutListsListID(ctx context.Context, listID int64, body oapiclient.PutListsListIDJSONRequestBody, reqEditors ...oapiclient.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, listID, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutListsListID")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, oapiclient.PutListsListIDJSONRequestBody, ...oapiclient.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, listID, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, oapiclient.PutListsListIDJSONRequestBody, ...oapiclient.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, listID, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, oapiclient.PutListsListIDJSONRequestBody, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, listID, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PutListsListID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutListsListID'
type MockClientInterface_PutListsListID_Call struct {
	*mock.Call
}

// PutListsListID is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - body oapiclient.PutListsListIDJSONRequestBody
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientInterface_Expecter) PutListsListID(ctx interface{}, listID interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PutListsListID_Call {
	return &MockClientInterface_PutListsListID_Call{Call: _e.mock.On("PutListsListID",
		append([]interface{}{ctx, listID, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PutListsListID_Call) Run(run func(ctx context.Context, listID int64, body oapiclient.PutListsListIDJSONRequestBody, reqEditors ...oapiclient.RequestEditorFn)) *MockClientInterface_PutListsListID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int64), args[2].(oapiclient.PutListsListIDJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PutListsListID_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PutListsListID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PutListsListID_Call) RunAndReturn(run func(context.Context, int64, oapiclient.PutListsListIDJSONRequestBody, ...oapiclient.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PutListsListID_Call {
	_c.Call.Return(run)
	return _c
}

// PutListsListIDWithBody provides a mock function with given fields: ctx, listID, contentType, body, reqEditors
func (_m *MockClientInterface) PutListsListIDWithBody(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...oapiclient.RequestEditorFn) (*http.Response, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, listID, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutListsListIDWithBody")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, io.Reader, ...oapiclient.RequestEditorFn) (*http.Response, error)); ok {
		return rf(ctx, listID, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, io.Reader, ...oapiclient.RequestEditorFn) *http.Response); ok {
		r0 = rf(ctx, listID, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, io.Reader, ...oapiclient.RequestEditorFn) error); ok {
		r1 = rf(ctx, listID, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_PutListsListIDWithBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutListsListIDWithBody'
type MockClientInterface_PutListsListIDWithBody_Call struct {
	*mock.Call
}

// PutListsListIDWithBody is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - contentType string
//   - body io.Reader
//   - reqEditors ...oapiclient.RequestEditorFn
func (_e *MockClientInterface_Expecter) PutListsListIDWithBody(ctx interface{}, listID interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientInterface_PutListsListIDWithBody_Call {
	return &MockClientInterface_PutListsListIDWithBody_Call{Call: _e.mock.On("PutListsListIDWithBody",
		append([]interface{}{ctx, listID, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientInterface_PutListsListIDWithBody_Call) Run(run func(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...oapiclient.RequestEditorFn)) *MockClientInterface_PutListsListIDWithBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]oapiclient.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(oapiclient.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_PutListsListIDWithBody_Call) Return(_a0 *http.Response, _a1 error) *MockClientInterface_PutListsListIDWithBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_PutListsListIDWithBody_Call) RunAndReturn(run func(context.Context, int64, string, io.Reader, ...oapiclient.RequestEditorFn) (*http.Response, error)) *MockClientInterface_PutListsListIDWithBody_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
