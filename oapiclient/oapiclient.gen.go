// MIT License
//
// Copyright (c) 2023 Alyx Holms
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Package oapiclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package oapiclient

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// GetListsParams defines parameters for GetLists.
type GetListsParams struct {
	Limit  *int32 `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// CreateListJSONBody defines parameters for CreateList.
type CreateListJSONBody struct {
	Name string `json:"name"`
}

// UpdateListJSONBody defines parameters for UpdateList.
type UpdateListJSONBody struct {
	Name string `json:"name"`
}

// GetItemsParams defines parameters for GetItems.
type GetItemsParams struct {
	Limit  *int32 `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// CreateItemJSONBody defines parameters for CreateItem.
type CreateItemJSONBody struct {
	Content string `json:"content"`
	Sort    int64  `json:"sort"`
}

// UpdateItemJSONBody defines parameters for UpdateItem.
type UpdateItemJSONBody struct {
	Name string `json:"name"`
}

// CreateListJSONRequestBody defines body for CreateList for application/json ContentType.
type CreateListJSONRequestBody CreateListJSONBody

// UpdateListJSONRequestBody defines body for UpdateList for application/json ContentType.
type UpdateListJSONRequestBody UpdateListJSONBody

// CreateItemJSONRequestBody defines body for CreateItem for application/json ContentType.
type CreateItemJSONRequestBody CreateItemJSONBody

// UpdateItemJSONRequestBody defines body for UpdateItem for application/json ContentType.
type UpdateItemJSONRequestBody UpdateItemJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetLists request
	GetLists(ctx context.Context, params *GetListsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateListWithBody request with any body
	CreateListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateList(ctx context.Context, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteList request
	DeleteList(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetList request
	GetList(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateListWithBody request with any body
	UpdateListWithBody(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateList(ctx context.Context, listID int64, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetItems request
	GetItems(ctx context.Context, listID int64, params *GetItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateItemWithBody request with any body
	CreateItemWithBody(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateItem(ctx context.Context, listID int64, body CreateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteItem request
	DeleteItem(ctx context.Context, listID int64, itemID int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetItem request
	GetItem(ctx context.Context, listID int64, itemID int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateItemWithBody request with any body
	UpdateItemWithBody(ctx context.Context, listID int64, itemID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateItem(ctx context.Context, listID int64, itemID int64, body UpdateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetLists(ctx context.Context, params *GetListsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateList(ctx context.Context, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteList(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListRequest(c.Server, listID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetList(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListRequest(c.Server, listID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListWithBody(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListRequestWithBody(c.Server, listID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateList(ctx context.Context, listID int64, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListRequest(c.Server, listID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetItems(ctx context.Context, listID int64, params *GetItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemsRequest(c.Server, listID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateItemWithBody(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateItemRequestWithBody(c.Server, listID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateItem(ctx context.Context, listID int64, body CreateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateItemRequest(c.Server, listID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteItem(ctx context.Context, listID int64, itemID int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteItemRequest(c.Server, listID, itemID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetItem(ctx context.Context, listID int64, itemID int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemRequest(c.Server, listID, itemID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateItemWithBody(ctx context.Context, listID int64, itemID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateItemRequestWithBody(c.Server, listID, itemID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateItem(ctx context.Context, listID int64, itemID int64, body UpdateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateItemRequest(c.Server, listID, itemID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetListsRequest generates requests for GetLists
func NewGetListsRequest(server string, params *GetListsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateListRequest calls the generic CreateList builder with application/json body
func NewCreateListRequest(server string, body CreateListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateListRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateListRequestWithBody generates requests for CreateList with any type of body
func NewCreateListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteListRequest generates requests for DeleteList
func NewDeleteListRequest(server string, listID int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listID", runtime.ParamLocationPath, listID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListRequest generates requests for GetList
func NewGetListRequest(server string, listID int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listID", runtime.ParamLocationPath, listID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateListRequest calls the generic UpdateList builder with application/json body
func NewUpdateListRequest(server string, listID int64, body UpdateListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateListRequestWithBody(server, listID, "application/json", bodyReader)
}

// NewUpdateListRequestWithBody generates requests for UpdateList with any type of body
func NewUpdateListRequestWithBody(server string, listID int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listID", runtime.ParamLocationPath, listID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetItemsRequest generates requests for GetItems
func NewGetItemsRequest(server string, listID int64, params *GetItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listID", runtime.ParamLocationPath, listID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateItemRequest calls the generic CreateItem builder with application/json body
func NewCreateItemRequest(server string, listID int64, body CreateItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateItemRequestWithBody(server, listID, "application/json", bodyReader)
}

// NewCreateItemRequestWithBody generates requests for CreateItem with any type of body
func NewCreateItemRequestWithBody(server string, listID int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listID", runtime.ParamLocationPath, listID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteItemRequest generates requests for DeleteItem
func NewDeleteItemRequest(server string, listID int64, itemID int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listID", runtime.ParamLocationPath, listID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "itemID", runtime.ParamLocationPath, itemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetItemRequest generates requests for GetItem
func NewGetItemRequest(server string, listID int64, itemID int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listID", runtime.ParamLocationPath, listID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "itemID", runtime.ParamLocationPath, itemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateItemRequest calls the generic UpdateItem builder with application/json body
func NewUpdateItemRequest(server string, listID int64, itemID int64, body UpdateItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateItemRequestWithBody(server, listID, itemID, "application/json", bodyReader)
}

// NewUpdateItemRequestWithBody generates requests for UpdateItem with any type of body
func NewUpdateItemRequestWithBody(server string, listID int64, itemID int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listID", runtime.ParamLocationPath, listID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "itemID", runtime.ParamLocationPath, itemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetListsWithResponse request
	GetListsWithResponse(ctx context.Context, params *GetListsParams, reqEditors ...RequestEditorFn) (*GetListsResponse, error)

	// CreateListWithBodyWithResponse request with any body
	CreateListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateListResponse, error)

	CreateListWithResponse(ctx context.Context, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateListResponse, error)

	// DeleteListWithResponse request
	DeleteListWithResponse(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*DeleteListResponse, error)

	// GetListWithResponse request
	GetListWithResponse(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*GetListResponse, error)

	// UpdateListWithBodyWithResponse request with any body
	UpdateListWithBodyWithResponse(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListResponse, error)

	UpdateListWithResponse(ctx context.Context, listID int64, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateListResponse, error)

	// GetItemsWithResponse request
	GetItemsWithResponse(ctx context.Context, listID int64, params *GetItemsParams, reqEditors ...RequestEditorFn) (*GetItemsResponse, error)

	// CreateItemWithBodyWithResponse request with any body
	CreateItemWithBodyWithResponse(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateItemResponse, error)

	CreateItemWithResponse(ctx context.Context, listID int64, body CreateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateItemResponse, error)

	// DeleteItemWithResponse request
	DeleteItemWithResponse(ctx context.Context, listID int64, itemID int64, reqEditors ...RequestEditorFn) (*DeleteItemResponse, error)

	// GetItemWithResponse request
	GetItemWithResponse(ctx context.Context, listID int64, itemID int64, reqEditors ...RequestEditorFn) (*GetItemResponse, error)

	// UpdateItemWithBodyWithResponse request with any body
	UpdateItemWithBodyWithResponse(ctx context.Context, listID int64, itemID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateItemResponse, error)

	UpdateItemWithResponse(ctx context.Context, listID int64, itemID int64, body UpdateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateItemResponse, error)
}

type GetListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id   *int64 `json:"id,omitempty"`
		Name string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r GetListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id   *int64 `json:"id,omitempty"`
		Name string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id   *int64 `json:"id,omitempty"`
		Name string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r GetListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id   *int64 `json:"id,omitempty"`
		Name string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Checked bool   `json:"checked"`
		Content string `json:"content"`
		Id      *int64 `json:"id,omitempty"`
		ListId  *int64 `json:"list_id,omitempty"`
		Sort    int64  `json:"sort"`
	}
}

// Status returns HTTPResponse.Status
func (r GetItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id   *int64 `json:"id,omitempty"`
		Name string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Checked bool   `json:"checked"`
		Content string `json:"content"`
		Id      *int64 `json:"id,omitempty"`
		ListId  *int64 `json:"list_id,omitempty"`
		Sort    int64  `json:"sort"`
	}
}

// Status returns HTTPResponse.Status
func (r GetItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Checked bool   `json:"checked"`
		Content string `json:"content"`
		Id      *int64 `json:"id,omitempty"`
		ListId  *int64 `json:"list_id,omitempty"`
		Sort    int64  `json:"sort"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetListsWithResponse request returning *GetListsResponse
func (c *ClientWithResponses) GetListsWithResponse(ctx context.Context, params *GetListsParams, reqEditors ...RequestEditorFn) (*GetListsResponse, error) {
	rsp, err := c.GetLists(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListsResponse(rsp)
}

// CreateListWithBodyWithResponse request with arbitrary body returning *CreateListResponse
func (c *ClientWithResponses) CreateListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateListResponse, error) {
	rsp, err := c.CreateListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateListResponse(rsp)
}

func (c *ClientWithResponses) CreateListWithResponse(ctx context.Context, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateListResponse, error) {
	rsp, err := c.CreateList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateListResponse(rsp)
}

// DeleteListWithResponse request returning *DeleteListResponse
func (c *ClientWithResponses) DeleteListWithResponse(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*DeleteListResponse, error) {
	rsp, err := c.DeleteList(ctx, listID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListResponse(rsp)
}

// GetListWithResponse request returning *GetListResponse
func (c *ClientWithResponses) GetListWithResponse(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*GetListResponse, error) {
	rsp, err := c.GetList(ctx, listID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListResponse(rsp)
}

// UpdateListWithBodyWithResponse request with arbitrary body returning *UpdateListResponse
func (c *ClientWithResponses) UpdateListWithBodyWithResponse(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListResponse, error) {
	rsp, err := c.UpdateListWithBody(ctx, listID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListResponse(rsp)
}

func (c *ClientWithResponses) UpdateListWithResponse(ctx context.Context, listID int64, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateListResponse, error) {
	rsp, err := c.UpdateList(ctx, listID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListResponse(rsp)
}

// GetItemsWithResponse request returning *GetItemsResponse
func (c *ClientWithResponses) GetItemsWithResponse(ctx context.Context, listID int64, params *GetItemsParams, reqEditors ...RequestEditorFn) (*GetItemsResponse, error) {
	rsp, err := c.GetItems(ctx, listID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemsResponse(rsp)
}

// CreateItemWithBodyWithResponse request with arbitrary body returning *CreateItemResponse
func (c *ClientWithResponses) CreateItemWithBodyWithResponse(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateItemResponse, error) {
	rsp, err := c.CreateItemWithBody(ctx, listID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateItemResponse(rsp)
}

func (c *ClientWithResponses) CreateItemWithResponse(ctx context.Context, listID int64, body CreateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateItemResponse, error) {
	rsp, err := c.CreateItem(ctx, listID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateItemResponse(rsp)
}

// DeleteItemWithResponse request returning *DeleteItemResponse
func (c *ClientWithResponses) DeleteItemWithResponse(ctx context.Context, listID int64, itemID int64, reqEditors ...RequestEditorFn) (*DeleteItemResponse, error) {
	rsp, err := c.DeleteItem(ctx, listID, itemID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteItemResponse(rsp)
}

// GetItemWithResponse request returning *GetItemResponse
func (c *ClientWithResponses) GetItemWithResponse(ctx context.Context, listID int64, itemID int64, reqEditors ...RequestEditorFn) (*GetItemResponse, error) {
	rsp, err := c.GetItem(ctx, listID, itemID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemResponse(rsp)
}

// UpdateItemWithBodyWithResponse request with arbitrary body returning *UpdateItemResponse
func (c *ClientWithResponses) UpdateItemWithBodyWithResponse(ctx context.Context, listID int64, itemID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateItemResponse, error) {
	rsp, err := c.UpdateItemWithBody(ctx, listID, itemID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateItemResponse(rsp)
}

func (c *ClientWithResponses) UpdateItemWithResponse(ctx context.Context, listID int64, itemID int64, body UpdateItemJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateItemResponse, error) {
	rsp, err := c.UpdateItem(ctx, listID, itemID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateItemResponse(rsp)
}

// ParseGetListsResponse parses an HTTP response from a GetListsWithResponse call
func ParseGetListsResponse(rsp *http.Response) (*GetListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id   *int64 `json:"id,omitempty"`
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateListResponse parses an HTTP response from a CreateListWithResponse call
func ParseCreateListResponse(rsp *http.Response) (*CreateListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id   *int64 `json:"id,omitempty"`
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteListResponse parses an HTTP response from a DeleteListWithResponse call
func ParseDeleteListResponse(rsp *http.Response) (*DeleteListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetListResponse parses an HTTP response from a GetListWithResponse call
func ParseGetListResponse(rsp *http.Response) (*GetListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id   *int64 `json:"id,omitempty"`
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateListResponse parses an HTTP response from a UpdateListWithResponse call
func ParseUpdateListResponse(rsp *http.Response) (*UpdateListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id   *int64 `json:"id,omitempty"`
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetItemsResponse parses an HTTP response from a GetItemsWithResponse call
func ParseGetItemsResponse(rsp *http.Response) (*GetItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Checked bool   `json:"checked"`
			Content string `json:"content"`
			Id      *int64 `json:"id,omitempty"`
			ListId  *int64 `json:"list_id,omitempty"`
			Sort    int64  `json:"sort"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateItemResponse parses an HTTP response from a CreateItemWithResponse call
func ParseCreateItemResponse(rsp *http.Response) (*CreateItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id   *int64 `json:"id,omitempty"`
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteItemResponse parses an HTTP response from a DeleteItemWithResponse call
func ParseDeleteItemResponse(rsp *http.Response) (*DeleteItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetItemResponse parses an HTTP response from a GetItemWithResponse call
func ParseGetItemResponse(rsp *http.Response) (*GetItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Checked bool   `json:"checked"`
			Content string `json:"content"`
			Id      *int64 `json:"id,omitempty"`
			ListId  *int64 `json:"list_id,omitempty"`
			Sort    int64  `json:"sort"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateItemResponse parses an HTTP response from a UpdateItemWithResponse call
func ParseUpdateItemResponse(rsp *http.Response) (*UpdateItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Checked bool   `json:"checked"`
			Content string `json:"content"`
			Id      *int64 `json:"id,omitempty"`
			ListId  *int64 `json:"list_id,omitempty"`
			Sort    int64  `json:"sort"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY34/iNhD+V6xpH1opWsMe24e8tV21RdpWfWifTqvKJAP4mtg+26FFKP975R8kQEiA",
	"W8pxTwtkPJ75vvlmZrOBTJZKChTWQLoBxTQr0aL237jFkuf+k4AUFLNLSECwEiH1D6fPkIDGjxXXmENq",
	"dYUJmGyJJXOn5lKXzDpbYb+bQAJ2rTB8xQVqqOsECl5y21zxsUK9bu8ID/tcvnvsc2lsb9ju4RXClvO5",
	"wd6449PLAq9DTGjsDzLn2DDg/mZSWBT+PqZUwTNmuRT0g5HC/dZeo7RUqG08vnMsXmes5mIBdQJGantu",
	"ti1W7xuf0cNrc0DOPmBmQyI5mkxz5YKEFF64sWQm8zWxksyQZBqZxbxDQuTuDQkH/DvZHqTgra4auL/A",
	"KClMiGMyGh3ij/9aqgrGD+I/jLQTw1SsWMFz8vtWmt+Ybx1/k9HkWlf8Ji35SVYid36frhm6RS1YQQzq",
	"FWqCWstQUMHJXokfVO4Ss78x37lmJmWBTLgQd2IruXhBsbBLSMdJt8hDGzhZ4qHu/jrb+u3a2ebXq6JW",
	"CvvAnB3jVgqDCJ0vDC7m0rkreIbCYCs2+HX6ByRQ6QJSWFqrTEqpVCiMrHSGD1IvaDxkqLOtE7DcFu7o",
	"L7JEpzFIYIXahKoZOwvngCkOKbx7GD+MIPFt3CNAHTD+0yJ0YAePbw/THFL4Ge2LN0j2ptn7DXytcQ4p",
	"fEXbmUdbExqGTZ2cNIzdvX49EP1jRznDrctVvj947L6oEJ+shyxQwrRm62Na+544SyLnJMDTdohj3pu4",
	"qTO6meqrsmR6HUgirBuxkuYIoz/6rhvrpB2R6/7kdqZoA+ABVeOLqDrNUM/w2E4MT8foHDpGO3QM2zqj",
	"fVgDUoQRgf+QGFcSBUM3YfWpneMcC7TYhfrZ/x6hvlQ+fus6oopJuLGDTQjiYmw+oawvxTHAEOpztibT",
	"Z+drqNtcEa3R/16YTnz7qd0Z/N0AVXUE+z9Vzq5RrNdpKKPbNJTKJ32Pogl07BHXbT60GXp9cpp6g08l",
	"NPlCx7zfgs8Y835NbwZncP0ljXofMZlrWZL4n/iJse/K4aby3jJx833BZfo59wWXOJGC2CU23PQJmG7C",
	"658zlok3EXhapfEd1Xlrh4f47tcOT8RsHUkgTOQkvmwb2EI+G8zXm3tBeT3CmG/fT9zhrjJI2MDqckvO",
	"7m3JGST77pecAca9vR+Hgc72xUhKaSEzViylsenj09MjZYrT1Rjq1/q/AAAA//8S0qxEiRcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
