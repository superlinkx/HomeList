// MIT License
//
// Copyright (c) 2023 Alyx Holms
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Package oapiclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package oapiclient

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// GetListsParams defines parameters for GetLists.
type GetListsParams struct {
	Limit  *int32 `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostListsJSONBody defines parameters for PostLists.
type PostListsJSONBody struct {
	Name string `json:"name"`
}

// PutListsListIDJSONBody defines parameters for PutListsListID.
type PutListsListIDJSONBody struct {
	Name string `json:"name"`
}

// PostListsJSONRequestBody defines body for PostLists for application/json ContentType.
type PostListsJSONRequestBody PostListsJSONBody

// PutListsListIDJSONRequestBody defines body for PutListsListID for application/json ContentType.
type PutListsListIDJSONRequestBody PutListsListIDJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetLists request
	GetLists(ctx context.Context, params *GetListsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostListsWithBody request with any body
	PostListsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLists(ctx context.Context, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteListsListID request
	DeleteListsListID(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListsListID request
	GetListsListID(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutListsListIDWithBody request with any body
	PutListsListIDWithBody(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutListsListID(ctx context.Context, listID int64, body PutListsListIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetLists(ctx context.Context, params *GetListsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostListsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostListsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLists(ctx context.Context, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostListsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteListsListID(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListsListIDRequest(c.Server, listID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListsListID(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListsListIDRequest(c.Server, listID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutListsListIDWithBody(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutListsListIDRequestWithBody(c.Server, listID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutListsListID(ctx context.Context, listID int64, body PutListsListIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutListsListIDRequest(c.Server, listID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetListsRequest generates requests for GetLists
func NewGetListsRequest(server string, params *GetListsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostListsRequest calls the generic PostLists builder with application/json body
func NewPostListsRequest(server string, body PostListsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostListsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostListsRequestWithBody generates requests for PostLists with any type of body
func NewPostListsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteListsListIDRequest generates requests for DeleteListsListID
func NewDeleteListsListIDRequest(server string, listID int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listID", runtime.ParamLocationPath, listID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetListsListIDRequest generates requests for GetListsListID
func NewGetListsListIDRequest(server string, listID int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listID", runtime.ParamLocationPath, listID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutListsListIDRequest calls the generic PutListsListID builder with application/json body
func NewPutListsListIDRequest(server string, listID int64, body PutListsListIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutListsListIDRequestWithBody(server, listID, "application/json", bodyReader)
}

// NewPutListsListIDRequestWithBody generates requests for PutListsListID with any type of body
func NewPutListsListIDRequestWithBody(server string, listID int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listID", runtime.ParamLocationPath, listID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetListsWithResponse request
	GetListsWithResponse(ctx context.Context, params *GetListsParams, reqEditors ...RequestEditorFn) (*GetListsResponse, error)

	// PostListsWithBodyWithResponse request with any body
	PostListsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostListsResponse, error)

	PostListsWithResponse(ctx context.Context, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostListsResponse, error)

	// DeleteListsListIDWithResponse request
	DeleteListsListIDWithResponse(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*DeleteListsListIDResponse, error)

	// GetListsListIDWithResponse request
	GetListsListIDWithResponse(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*GetListsListIDResponse, error)

	// PutListsListIDWithBodyWithResponse request with any body
	PutListsListIDWithBodyWithResponse(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutListsListIDResponse, error)

	PutListsListIDWithResponse(ctx context.Context, listID int64, body PutListsListIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutListsListIDResponse, error)
}

type GetListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListsListIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteListsListIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListsListIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListsListIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetListsListIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListsListIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutListsListIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id   *int64  `json:"id,omitempty"`
		Name *string `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutListsListIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutListsListIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetListsWithResponse request returning *GetListsResponse
func (c *ClientWithResponses) GetListsWithResponse(ctx context.Context, params *GetListsParams, reqEditors ...RequestEditorFn) (*GetListsResponse, error) {
	rsp, err := c.GetLists(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListsResponse(rsp)
}

// PostListsWithBodyWithResponse request with arbitrary body returning *PostListsResponse
func (c *ClientWithResponses) PostListsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostListsResponse, error) {
	rsp, err := c.PostListsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostListsResponse(rsp)
}

func (c *ClientWithResponses) PostListsWithResponse(ctx context.Context, body PostListsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostListsResponse, error) {
	rsp, err := c.PostLists(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostListsResponse(rsp)
}

// DeleteListsListIDWithResponse request returning *DeleteListsListIDResponse
func (c *ClientWithResponses) DeleteListsListIDWithResponse(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*DeleteListsListIDResponse, error) {
	rsp, err := c.DeleteListsListID(ctx, listID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListsListIDResponse(rsp)
}

// GetListsListIDWithResponse request returning *GetListsListIDResponse
func (c *ClientWithResponses) GetListsListIDWithResponse(ctx context.Context, listID int64, reqEditors ...RequestEditorFn) (*GetListsListIDResponse, error) {
	rsp, err := c.GetListsListID(ctx, listID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListsListIDResponse(rsp)
}

// PutListsListIDWithBodyWithResponse request with arbitrary body returning *PutListsListIDResponse
func (c *ClientWithResponses) PutListsListIDWithBodyWithResponse(ctx context.Context, listID int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutListsListIDResponse, error) {
	rsp, err := c.PutListsListIDWithBody(ctx, listID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutListsListIDResponse(rsp)
}

func (c *ClientWithResponses) PutListsListIDWithResponse(ctx context.Context, listID int64, body PutListsListIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutListsListIDResponse, error) {
	rsp, err := c.PutListsListID(ctx, listID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutListsListIDResponse(rsp)
}

// ParseGetListsResponse parses an HTTP response from a GetListsWithResponse call
func ParseGetListsResponse(rsp *http.Response) (*GetListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id   *int64  `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostListsResponse parses an HTTP response from a PostListsWithResponse call
func ParsePostListsResponse(rsp *http.Response) (*PostListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id   *int64  `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteListsListIDResponse parses an HTTP response from a DeleteListsListIDWithResponse call
func ParseDeleteListsListIDResponse(rsp *http.Response) (*DeleteListsListIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListsListIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetListsListIDResponse parses an HTTP response from a GetListsListIDWithResponse call
func ParseGetListsListIDResponse(rsp *http.Response) (*GetListsListIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListsListIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id   *int64  `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutListsListIDResponse parses an HTTP response from a PutListsListIDWithResponse call
func ParsePutListsListIDResponse(rsp *http.Response) (*PutListsListIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutListsListIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id   *int64  `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWQW/bPAz9KwK/77ABRuWk6Q6+bSu2BeiGHrZT0YNiM4kKW1IlOlsQ+L8PkpykiZ10",
	"GbKiN8em+B75HqmsINeV0QoVOchWYIQVFRLa8KuUlST/IBVk8FijXUICSlQIWfsxAZfPsRI+aqptJQgy",
	"kIouh5AALQ3GnzhDC02TQCkdyWKT0wiaP03paHwNCVh8rKXFAjKyNR7CeDfqx9DTqcODvNuvpxFvIid0",
	"9EEXEtvuuACSa0WowqMwppS5IKkVf3Ba+XdbGGO1QUvt8UhntcZyZKWawRopVn8Xo+43jPTkAXOKhAp0",
	"uZXGg0EGN9IRm+hiyUizCbLcoiAsOs2MAM5o5SKPUZruVUH4i7gphdzjv8+0w2GsFqKUBbtdu+iNewtN",
	"AqN0dC6Ib5rYJ12rwue9Oid1QqtEyRzaBVqG1uropphkR/FdIaOdnzVmckTxHnWlmuqImaNyuHUMfB1/",
	"hwRqW0IGcyLjMs61QeV0bXO80HbG20OO+1ifX1Lpj37RFXqjQAILtC6WPvARPoEwEjK4vBhcpJCE0Qz1",
	"cV92eJrFqfLFB4+PC8jgM9JNCEh2tsfdCv63OIUM/uPbHcO3ITwukCZ5NrCd2OZ+z7nDjvzH508SVu4l",
	"9Nu8ENaKZZ/d3jPfVKanLDZ3OyR9vdhUzX3Qixm/riphl1FiJrqMjXY9frjVbmOI7c5cHq7tyVoNVoOm",
	"o/PgJJ37YNopbgEOrM/1zgxqpH+iRvpEjeOxPmi3qx8DGhNM4U/W8kraaeOreBc2PnGBJRJ2O30d3ode",
	"36xvzlNHMNzGPZM1isCdFkUuJ7foL8x9ajtjN6JLJ0s2vva5jm6sszct/ec29ZO4W+ErU6FL0NR9S6I+",
	"nwTnWTHpy6yY2hTidc7Pj8BsR7wQEK6FqMr2P0fGealzUc61o2x4dTXkwki+GEBz3/wOAAD//ypEwdtU",
	"DAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
