// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	app "github.com/superlinkx/HomeList/app"

	mock "github.com/stretchr/testify/mock"
)

// MockListItem is an autogenerated mock type for the listItem type
type MockListItem struct {
	mock.Mock
}

type MockListItem_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListItem) EXPECT() *MockListItem_Expecter {
	return &MockListItem_Expecter{mock: &_m.Mock}
}

// AddItemToList provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockListItem) AddItemToList(_a0 context.Context, _a1 int64, _a2 string, _a3 int64) (app.ListItem, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for AddItemToList")
	}

	var r0 app.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, int64) (app.ListItem, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, int64) app.ListItem); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(app.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListItem_AddItemToList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddItemToList'
type MockListItem_AddItemToList_Call struct {
	*mock.Call
}

// AddItemToList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 string
//   - _a3 int64
func (_e *MockListItem_Expecter) AddItemToList(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockListItem_AddItemToList_Call {
	return &MockListItem_AddItemToList_Call{Call: _e.mock.On("AddItemToList", _a0, _a1, _a2, _a3)}
}

func (_c *MockListItem_AddItemToList_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 string, _a3 int64)) *MockListItem_AddItemToList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *MockListItem_AddItemToList_Call) Return(_a0 app.ListItem, _a1 error) *MockListItem_AddItemToList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListItem_AddItemToList_Call) RunAndReturn(run func(context.Context, int64, string, int64) (app.ListItem, error)) *MockListItem_AddItemToList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteListItem provides a mock function with given fields: _a0, _a1
func (_m *MockListItem) DeleteListItem(_a0 context.Context, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteListItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockListItem_DeleteListItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteListItem'
type MockListItem_DeleteListItem_Call struct {
	*mock.Call
}

// DeleteListItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
func (_e *MockListItem_Expecter) DeleteListItem(_a0 interface{}, _a1 interface{}) *MockListItem_DeleteListItem_Call {
	return &MockListItem_DeleteListItem_Call{Call: _e.mock.On("DeleteListItem", _a0, _a1)}
}

func (_c *MockListItem_DeleteListItem_Call) Run(run func(_a0 context.Context, _a1 int64)) *MockListItem_DeleteListItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockListItem_DeleteListItem_Call) Return(_a0 error) *MockListItem_DeleteListItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockListItem_DeleteListItem_Call) RunAndReturn(run func(context.Context, int64) error) *MockListItem_DeleteListItem_Call {
	_c.Call.Return(run)
	return _c
}

// FetchAllItemsFromList provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockListItem) FetchAllItemsFromList(_a0 context.Context, _a1 int64, _a2 int64) ([]app.ListItem, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllItemsFromList")
	}

	var r0 []app.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]app.ListItem, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []app.ListItem); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]app.ListItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListItem_FetchAllItemsFromList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAllItemsFromList'
type MockListItem_FetchAllItemsFromList_Call struct {
	*mock.Call
}

// FetchAllItemsFromList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 int64
func (_e *MockListItem_Expecter) FetchAllItemsFromList(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockListItem_FetchAllItemsFromList_Call {
	return &MockListItem_FetchAllItemsFromList_Call{Call: _e.mock.On("FetchAllItemsFromList", _a0, _a1, _a2)}
}

func (_c *MockListItem_FetchAllItemsFromList_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 int64)) *MockListItem_FetchAllItemsFromList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockListItem_FetchAllItemsFromList_Call) Return(_a0 []app.ListItem, _a1 error) *MockListItem_FetchAllItemsFromList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListItem_FetchAllItemsFromList_Call) RunAndReturn(run func(context.Context, int64, int64) ([]app.ListItem, error)) *MockListItem_FetchAllItemsFromList_Call {
	_c.Call.Return(run)
	return _c
}

// FetchListItem provides a mock function with given fields: _a0, _a1
func (_m *MockListItem) FetchListItem(_a0 context.Context, _a1 int64) (app.ListItem, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FetchListItem")
	}

	var r0 app.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (app.ListItem, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) app.ListItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(app.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListItem_FetchListItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchListItem'
type MockListItem_FetchListItem_Call struct {
	*mock.Call
}

// FetchListItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
func (_e *MockListItem_Expecter) FetchListItem(_a0 interface{}, _a1 interface{}) *MockListItem_FetchListItem_Call {
	return &MockListItem_FetchListItem_Call{Call: _e.mock.On("FetchListItem", _a0, _a1)}
}

func (_c *MockListItem_FetchListItem_Call) Run(run func(_a0 context.Context, _a1 int64)) *MockListItem_FetchListItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockListItem_FetchListItem_Call) Return(_a0 app.ListItem, _a1 error) *MockListItem_FetchListItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListItem_FetchListItem_Call) RunAndReturn(run func(context.Context, int64) (app.ListItem, error)) *MockListItem_FetchListItem_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListItemChecked provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockListItem) UpdateListItemChecked(_a0 context.Context, _a1 int64, _a2 bool) (app.ListItem, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListItemChecked")
	}

	var r0 app.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) (app.ListItem, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) app.ListItem); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(app.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListItem_UpdateListItemChecked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListItemChecked'
type MockListItem_UpdateListItemChecked_Call struct {
	*mock.Call
}

// UpdateListItemChecked is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 bool
func (_e *MockListItem_Expecter) UpdateListItemChecked(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockListItem_UpdateListItemChecked_Call {
	return &MockListItem_UpdateListItemChecked_Call{Call: _e.mock.On("UpdateListItemChecked", _a0, _a1, _a2)}
}

func (_c *MockListItem_UpdateListItemChecked_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 bool)) *MockListItem_UpdateListItemChecked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(bool))
	})
	return _c
}

func (_c *MockListItem_UpdateListItemChecked_Call) Return(_a0 app.ListItem, _a1 error) *MockListItem_UpdateListItemChecked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListItem_UpdateListItemChecked_Call) RunAndReturn(run func(context.Context, int64, bool) (app.ListItem, error)) *MockListItem_UpdateListItemChecked_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListItemContent provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockListItem) UpdateListItemContent(_a0 context.Context, _a1 int64, _a2 string) (app.ListItem, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListItemContent")
	}

	var r0 app.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (app.ListItem, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) app.ListItem); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(app.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListItem_UpdateListItemContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListItemContent'
type MockListItem_UpdateListItemContent_Call struct {
	*mock.Call
}

// UpdateListItemContent is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 string
func (_e *MockListItem_Expecter) UpdateListItemContent(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockListItem_UpdateListItemContent_Call {
	return &MockListItem_UpdateListItemContent_Call{Call: _e.mock.On("UpdateListItemContent", _a0, _a1, _a2)}
}

func (_c *MockListItem_UpdateListItemContent_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 string)) *MockListItem_UpdateListItemContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockListItem_UpdateListItemContent_Call) Return(_a0 app.ListItem, _a1 error) *MockListItem_UpdateListItemContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListItem_UpdateListItemContent_Call) RunAndReturn(run func(context.Context, int64, string) (app.ListItem, error)) *MockListItem_UpdateListItemContent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListItemSort provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockListItem) UpdateListItemSort(_a0 context.Context, _a1 int64, _a2 int64) (app.ListItem, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListItemSort")
	}

	var r0 app.ListItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (app.ListItem, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) app.ListItem); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(app.ListItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListItem_UpdateListItemSort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListItemSort'
type MockListItem_UpdateListItemSort_Call struct {
	*mock.Call
}

// UpdateListItemSort is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 int64
func (_e *MockListItem_Expecter) UpdateListItemSort(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockListItem_UpdateListItemSort_Call {
	return &MockListItem_UpdateListItemSort_Call{Call: _e.mock.On("UpdateListItemSort", _a0, _a1, _a2)}
}

func (_c *MockListItem_UpdateListItemSort_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 int64)) *MockListItem_UpdateListItemSort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockListItem_UpdateListItemSort_Call) Return(_a0 app.ListItem, _a1 error) *MockListItem_UpdateListItemSort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListItem_UpdateListItemSort_Call) RunAndReturn(run func(context.Context, int64, int64) (app.ListItem, error)) *MockListItem_UpdateListItemSort_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListItem creates a new instance of MockListItem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListItem(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListItem {
	mock := &MockListItem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
