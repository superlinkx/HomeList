// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/superlinkx/HomeList/app/model"
)

// MockListApp is an autogenerated mock type for the ListApp type
type MockListApp struct {
	mock.Mock
}

type MockListApp_Expecter struct {
	mock *mock.Mock
}

func (_m *MockListApp) EXPECT() *MockListApp_Expecter {
	return &MockListApp_Expecter{mock: &_m.Mock}
}

// AllLists provides a mock function with given fields: ctx, limit, offset
func (_m *MockListApp) AllLists(ctx context.Context, limit int32, offset int32) ([]model.List, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for AllLists")
	}

	var r0 []model.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) ([]model.List, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) []model.List); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.List)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListApp_AllLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllLists'
type MockListApp_AllLists_Call struct {
	*mock.Call
}

// AllLists is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int32
//   - offset int32
func (_e *MockListApp_Expecter) AllLists(ctx interface{}, limit interface{}, offset interface{}) *MockListApp_AllLists_Call {
	return &MockListApp_AllLists_Call{Call: _e.mock.On("AllLists", ctx, limit, offset)}
}

func (_c *MockListApp_AllLists_Call) Run(run func(ctx context.Context, limit int32, offset int32)) *MockListApp_AllLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(int32))
	})
	return _c
}

func (_c *MockListApp_AllLists_Call) Return(_a0 []model.List, _a1 error) *MockListApp_AllLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListApp_AllLists_Call) RunAndReturn(run func(context.Context, int32, int32) ([]model.List, error)) *MockListApp_AllLists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateList provides a mock function with given fields: ctx, name
func (_m *MockListApp) CreateList(ctx context.Context, name string) (model.List, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateList")
	}

	var r0 model.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.List, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.List); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(model.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListApp_CreateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateList'
type MockListApp_CreateList_Call struct {
	*mock.Call
}

// CreateList is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockListApp_Expecter) CreateList(ctx interface{}, name interface{}) *MockListApp_CreateList_Call {
	return &MockListApp_CreateList_Call{Call: _e.mock.On("CreateList", ctx, name)}
}

func (_c *MockListApp_CreateList_Call) Run(run func(ctx context.Context, name string)) *MockListApp_CreateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockListApp_CreateList_Call) Return(_a0 model.List, _a1 error) *MockListApp_CreateList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListApp_CreateList_Call) RunAndReturn(run func(context.Context, string) (model.List, error)) *MockListApp_CreateList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteList provides a mock function with given fields: ctx, listID
func (_m *MockListApp) DeleteList(ctx context.Context, listID int64) error {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, listID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockListApp_DeleteList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteList'
type MockListApp_DeleteList_Call struct {
	*mock.Call
}

// DeleteList is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
func (_e *MockListApp_Expecter) DeleteList(ctx interface{}, listID interface{}) *MockListApp_DeleteList_Call {
	return &MockListApp_DeleteList_Call{Call: _e.mock.On("DeleteList", ctx, listID)}
}

func (_c *MockListApp_DeleteList_Call) Run(run func(ctx context.Context, listID int64)) *MockListApp_DeleteList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockListApp_DeleteList_Call) Return(_a0 error) *MockListApp_DeleteList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockListApp_DeleteList_Call) RunAndReturn(run func(context.Context, int64) error) *MockListApp_DeleteList_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, listID
func (_m *MockListApp) GetList(ctx context.Context, listID int64) (model.List, error) {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 model.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.List, error)); ok {
		return rf(ctx, listID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.List); ok {
		r0 = rf(ctx, listID)
	} else {
		r0 = ret.Get(0).(model.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, listID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListApp_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type MockListApp_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
func (_e *MockListApp_Expecter) GetList(ctx interface{}, listID interface{}) *MockListApp_GetList_Call {
	return &MockListApp_GetList_Call{Call: _e.mock.On("GetList", ctx, listID)}
}

func (_c *MockListApp_GetList_Call) Run(run func(ctx context.Context, listID int64)) *MockListApp_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockListApp_GetList_Call) Return(_a0 model.List, _a1 error) *MockListApp_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListApp_GetList_Call) RunAndReturn(run func(context.Context, int64) (model.List, error)) *MockListApp_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// ReflowList provides a mock function with given fields: ctx, listID
func (_m *MockListApp) ReflowList(ctx context.Context, listID int64) error {
	ret := _m.Called(ctx, listID)

	if len(ret) == 0 {
		panic("no return value specified for ReflowList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, listID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockListApp_ReflowList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReflowList'
type MockListApp_ReflowList_Call struct {
	*mock.Call
}

// ReflowList is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
func (_e *MockListApp_Expecter) ReflowList(ctx interface{}, listID interface{}) *MockListApp_ReflowList_Call {
	return &MockListApp_ReflowList_Call{Call: _e.mock.On("ReflowList", ctx, listID)}
}

func (_c *MockListApp_ReflowList_Call) Run(run func(ctx context.Context, listID int64)) *MockListApp_ReflowList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockListApp_ReflowList_Call) Return(_a0 error) *MockListApp_ReflowList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockListApp_ReflowList_Call) RunAndReturn(run func(context.Context, int64) error) *MockListApp_ReflowList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateList provides a mock function with given fields: ctx, listID, name
func (_m *MockListApp) UpdateList(ctx context.Context, listID int64, name string) (model.List, error) {
	ret := _m.Called(ctx, listID, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateList")
	}

	var r0 model.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (model.List, error)); ok {
		return rf(ctx, listID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) model.List); ok {
		r0 = rf(ctx, listID, name)
	} else {
		r0 = ret.Get(0).(model.List)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, listID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockListApp_UpdateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateList'
type MockListApp_UpdateList_Call struct {
	*mock.Call
}

// UpdateList is a helper method to define mock.On call
//   - ctx context.Context
//   - listID int64
//   - name string
func (_e *MockListApp_Expecter) UpdateList(ctx interface{}, listID interface{}, name interface{}) *MockListApp_UpdateList_Call {
	return &MockListApp_UpdateList_Call{Call: _e.mock.On("UpdateList", ctx, listID, name)}
}

func (_c *MockListApp_UpdateList_Call) Run(run func(ctx context.Context, listID int64, name string)) *MockListApp_UpdateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockListApp_UpdateList_Call) Return(_a0 model.List, _a1 error) *MockListApp_UpdateList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockListApp_UpdateList_Call) RunAndReturn(run func(context.Context, int64, string) (model.List, error)) *MockListApp_UpdateList_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockListApp creates a new instance of MockListApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockListApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockListApp {
	mock := &MockListApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
